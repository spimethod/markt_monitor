import os
import psycopg2
from psycopg2.extras import RealDictCursor

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (Railway) ===
PGHOST = os.getenv("PGHOST")
PGPORT = os.getenv("PGPORT", "5432")
PGUSER = os.getenv("PGUSER")
PGPASSWORD = os.getenv("PGPASSWORD")
PGDATABASE = os.getenv("PGDATABASE")

def check_table_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã markets"""
    conn = None
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not all([PGHOST, PGUSER, PGPASSWORD, PGDATABASE]):
            print("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
            print(f"   PGHOST: {'‚úÖ' if PGHOST else '‚ùå'}")
            print(f"   PGUSER: {'‚úÖ' if PGUSER else '‚ùå'}")
            print(f"   PGPASSWORD: {'‚úÖ' if PGPASSWORD else '‚ùå'}")
            print(f"   PGDATABASE: {'‚úÖ' if PGDATABASE else '‚ùå'}")
            return
        
        print("üîó –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ PostgreSQL –Ω–∞ Railway...")
        conn = psycopg2.connect(
            host=PGHOST,
            port=PGPORT,
            user=PGUSER,
            password=PGPASSWORD,
            database=PGDATABASE
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        with conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'markets'
                ORDER BY ordinal_position;
            """)
            
            columns = cursor.fetchall()
            
            if not columns:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'markets' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            
            print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã 'markets':")
            print("=" * 80)
            print(f"{'–ö–æ–ª–æ–Ω–∫–∞':<20} {'–¢–∏–ø':<15} {'NULL':<8} {'–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}")
            print("-" * 80)
            
            for col in columns:
                nullable = "YES" if col['is_nullable'] == 'YES' else "NO"
                default = col['column_default'] or "NULL"
                print(f"{col['column_name']:<20} {col['data_type']:<15} {nullable:<8} {default}")
            
            print("=" * 80)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) as count FROM markets")
            count = cursor.fetchone()['count']
            print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ä—ã–Ω–∫–æ–≤
            cursor.execute("""
                SELECT market_status, COUNT(*) as count 
                FROM markets 
                GROUP BY market_status 
                ORDER BY count DESC;
            """)
            
            statuses = cursor.fetchall()
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
            for status in statuses:
                print(f"   {status['market_status']}: {status['count']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
            cursor.execute("""
                SELECT id, question, slug, market_status, created_at, trading_activated_at
                FROM markets 
                ORDER BY created_at DESC 
                LIMIT 3;
            """)
            
            recent = cursor.fetchall()
            print(f"\nüÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏:")
            for record in recent:
                print(f"   ID: {record['id']}, Slug: {record['slug']}, Status: {record['market_status']}")
                print(f"   Created: {record['created_at']}, Activated: {record['trading_activated_at']}")
                print()
            
    except psycopg2.OperationalError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    check_table_structure() 