#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ Polymarket Data API
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø—É–±–ª–∏—á–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
"""

import sys
import os
import requests

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from loguru import logger

def test_polymarket_data_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Polymarket Data API —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Polymarket Data API")
    
    # –ò–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –Ω–∞ Polymarket
    test_addresses = [
        "0x0000000000000000000000000000000000000000",  # –ù—É–ª–µ–≤–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        "0x190Cc00825739D2a20DA3036a8D85419342C84E",  # –ù–∞—à proxy –∞–¥—Ä–µ—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    ]
    
    for test_address in test_addresses:
        logger.info(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: {test_address}")
        
        # –¢–µ—Å—Ç 1: API /value (–æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π)
        logger.info("üìä –¢–µ—Å—Ç 1: /value API")
        try:
            value_url = f"https://data-api.polymarket.com/value?user={test_address}"
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å: {value_url}")
            
            response = requests.get(value_url, timeout=10)
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"üìã –û—Ç–≤–µ—Ç: {data}")
                
                if isinstance(data, list) and len(data) > 0:
                    user_data = data[0]
                    if 'value' in user_data:
                        value = float(user_data['value'])
                        logger.info(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π: ${value:.6f}")
                    else:
                        logger.info("‚ÑπÔ∏è –ü–æ–ª–µ 'value' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                elif isinstance(data, list) and len(data) == 0:
                    logger.info("‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {type(data)}")
            else:
                logger.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ /value API: {e}")
        
        # –¢–µ—Å—Ç 2: API /positions (–¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
        logger.info("\nüìà –¢–µ—Å—Ç 2: /positions API")
        try:
            positions_url = f"https://data-api.polymarket.com/positions?user={test_address}"
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å: {positions_url}")
            
            response = requests.get(positions_url, timeout=10)
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"üìã –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(data)}")
                
                if isinstance(data, list):
                    logger.info(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(data)}")
                    
                    if len(data) > 0:
                        first_position = data[0]
                        logger.info(f"üìã –ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (–∫–ª—é—á–∏): {list(first_position.keys()) if isinstance(first_position, dict) else '–Ω–µ —Å–ª–æ–≤–∞—Ä—å'}")
                        
                        if isinstance(first_position, dict) and 'proxyWallet' in first_position:
                            proxy_wallet = first_position['proxyWallet']
                            logger.info(f"üè¶ –ù–∞–π–¥–µ–Ω proxy wallet: {proxy_wallet}")
                        else:
                            logger.info("‚ÑπÔ∏è proxyWallet –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏")
                            
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                        if isinstance(first_position, dict):
                            relevant_fields = ['proxyWallet', 'initialValue', 'currentValue', 'cashPnl', 'value']
                            logger.info("üìã –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–ª—è –≤ –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏:")
                            for field in relevant_fields:
                                if field in first_position:
                                    logger.info(f"  ‚Ä¢ {field}: {first_position[field]}")
                    else:
                        logger.info("‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {type(data)}")
            else:
                logger.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ /positions API: {e}")

def test_usdc_contracts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É USDC –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ RPC"""
    logger.info("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ USDC –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ RPC")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
    test_proxy_wallet = "0x190Cc00825739D2a20DA3036a8D85419342C84E"
    
    # USDC –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
    usdc_contracts = [
        ("Native USDC", "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359"),
        ("Bridged USDC", "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"),
    ]
    
    # RPC endpoints
    rpc_endpoints = [
        "https://polygon-rpc.com",
        "https://polygon.llamarpc.com",
    ]
    
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ USDC –¥–ª—è –∞–¥—Ä–µ—Å–∞: {test_proxy_wallet}")
    
    for contract_name, contract_addr in usdc_contracts:
        logger.info(f"\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ {contract_name}: {contract_addr}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ balanceOf
        function_signature = "0x70a08231"  # balanceOf(address)
        padded_address = test_proxy_wallet.replace("0x", "").lower().zfill(64)
        call_data = function_signature + padded_address
        
        for rpc_url in rpc_endpoints:
            try:
                logger.info(f"üåê RPC: {rpc_url}")
                
                payload = {
                    "jsonrpc": "2.0",
                    "method": "eth_call",
                    "params": [{
                        "to": contract_addr,
                        "data": call_data
                    }, "latest"],
                    "id": 1
                }
                
                response = requests.post(
                    rpc_url,
                    json=payload,
                    headers={"Content-Type": "application/json"},
                    timeout=10
                )
                
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    result = data.get("result", "0x0")
                    logger.info(f"üìã Result: {result}")
                    
                    if result and result != "0x0" and not result.endswith("0" * 60):
                        balance_wei = int(result, 16)
                        balance_usdc = balance_wei / (10 ** 6)
                        logger.info(f"‚úÖ USDC –±–∞–ª–∞–Ω—Å: ${balance_usdc:.6f}")
                        break  # –ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
                    else:
                        logger.info("‚ÑπÔ∏è –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å")
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ RPC {rpc_url}: {e}")

if __name__ == "__main__":
    test_polymarket_data_api()
    test_usdc_contracts()
    logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö API –∑–∞–≤–µ—Ä—à–µ–Ω–æ") 