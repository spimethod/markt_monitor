"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Polymarket Factory Monitor
–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Å–µ —Ñ–∞–±—Ä–∏–∫–∏ Polymarket –Ω–∞ Polygon
"""

import time
import signal
import sys
from typing import List, Dict, Any, cast
from web3 import Web3
from web3.providers import LegacyWebSocketProvider
from web3.types import FilterParams
from eth_utils import to_checksum_address, event_abi_to_log_topic
from loguru import logger

# ---------------------------------------------------------------------------
# WebSocket RPC (Alchemy)
# ---------------------------------------------------------------------------
POLYGON_WS = "wss://polygon-mainnet.g.alchemy.com/v2/fqlDOKopXL8QsZnEdCrkV"

# ---------------------------------------------------------------------------
# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–±—Ä–∏–∫–∏ Polymarket (–∏—é–ª—å 2025)
# ---------------------------------------------------------------------------
FACTORIES_RAW: List[str] = [
    "0x8B9805A2f595B6705e74F7310829f2d299D21522",  # FP-MM v1
    "0x4bFb41d5B3570DeFd03C39a9A4D8dE6Bd8B8982E",  # CLOB factory
    "0x7bB0f881F37331d77b58dcDFdB9a46f0BfA4eF4F",  # FP-MM v2
    "0xa9425A42E0B664F8B4F4B5f4b8224F7C7F3B3CdF",  # Parlay factory
]
FACTORIES = [to_checksum_address(a) for a in FACTORIES_RAW]

# ---------------------------------------------------------------------------
# –ú–∏–Ω–∏-ABI –∏ topic0 –¥–ª—è –Ω—É–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
# ---------------------------------------------------------------------------
ABI_AMM: Dict[str, Any] = {
    "name": "MarketCreated", "type": "event", "anonymous": False,
    "inputs": [{"indexed": True, "name": "market", "type": "address"}]
}
ABI_CLOB: Dict[str, Any] = {
    "name": "OrderbookCreated", "type": "event", "anonymous": False,
    "inputs": [{"indexed": True, "name": "orderbook", "type": "address"},
               {"indexed": True, "name": "creator", "type": "address"}]
}
ABI_PARLAY: Dict[str, Any] = {
    "name": "ParlayCreated", "type": "event", "anonymous": False,
    "inputs": [{"indexed": True, "name": "parlay", "type": "address"},
               {"indexed": True, "name": "creator", "type": "address"}]
}

TOPIC_AMM = event_abi_to_log_topic(cast(Any, ABI_AMM))
TOPIC_CLOB = event_abi_to_log_topic(cast(Any, ABI_CLOB))
TOPIC_PARLAY = event_abi_to_log_topic(cast(Any, ABI_PARLAY))


class PolymarketFactoryMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Ñ–∞–±—Ä–∏–∫ Polymarket"""
    
    def __init__(self):
        self.w3 = None
        self.log_filter = None
        self.is_running = False
    
    def setup_connection(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Polygon"""
        try:
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Polygon WebSocket...")
            self.w3 = Web3(LegacyWebSocketProvider(POLYGON_WS))
            
            if not self.w3.is_connected():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Polygon WS RPC")
            
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Polygon —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–±—Ä–∏–∫
            self.log_filter = self.w3.eth.filter(cast(FilterParams, {
                "address": FACTORIES,
                "fromBlock": "latest",
                "topics": [[TOPIC_AMM.hex(), TOPIC_CLOB.hex(), TOPIC_PARLAY.hex()]]
            }))
            
            logger.info("‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–Ω")
            logger.info(f"üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–±—Ä–∏–∫: {len(FACTORIES)} –∞–¥—Ä–µ—Å–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise
    
    def process_event(self, log):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—ã–Ω–∫–∞"""
        try:
            topic0 = log["topics"][0]
            
            if topic0 == TOPIC_AMM.hex():
                market = to_checksum_address("0x" + log["topics"][1].hex()[-40:])
                logger.info(f"üÜï AMM market    {market}")
                
            elif topic0 == TOPIC_CLOB.hex():
                orderbook = to_checksum_address("0x" + log["topics"][1].hex()[-40:])
                creator = to_checksum_address("0x" + log["topics"][2].hex()[-40:])
                logger.info(f"üÜï CLOB orderbook {orderbook} | creator {creator}")
                
            elif topic0 == TOPIC_PARLAY.hex():
                parlay = to_checksum_address("0x" + log["topics"][1].hex()[-40:])
                creator = to_checksum_address("0x" + log["topics"][2].hex()[-40:])
                logger.info(f"üÜï Parlay        {parlay}  | creator {creator}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    def monitor_events(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üü¢ –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤...")
        
        try:
            while self.is_running:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
                for log in self.log_filter.get_new_entries():
                    self.process_event(log)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                time.sleep(2)
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            raise
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            logger.info("=== –ó–∞–ø—É—Å–∫ Polymarket Factory Monitor ===")
            self.is_running = True
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.setup_connection()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            self._setup_signal_handlers()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.monitor_events()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stop()
            sys.exit(1)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Polymarket Factory Monitor...")
            self.is_running = False
            
            if self.log_filter and self.w3:
                self.w3.eth.uninstall_filter(self.log_filter.filter_id)
                logger.info("‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–µ–Ω")
            
            logger.info("=== Polymarket Factory Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
            self.is_running = False
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = PolymarketFactoryMonitor()
    monitor.start()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 