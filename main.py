"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Polymarket Factory Monitor
–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Å–µ —Ñ–∞–±—Ä–∏–∫–∏ Polymarket –Ω–∞ Polygon
"""

import requests
import time
import os
import sys
import psycopg2
from psycopg2.extras import execute_values
from loguru import logger
from datetime import datetime, timedelta, timezone

# === –ö–æ–Ω—Ñ–∏–≥ ===
API_URL = os.getenv("API_URL")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 30))  # —Å–µ–∫—É–Ω–¥

# === Telegram –∫–æ–Ω—Ñ–∏–≥ ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (Railway) ===
PGHOST = os.getenv("PGHOST")
PGPORT = os.getenv("PGPORT", "5432")
PGUSER = os.getenv("PGUSER")
PGPASSWORD = os.getenv("PGPASSWORD")
PGDATABASE = os.getenv("PGDATABASE")

logger.remove()
logger.add(sys.stdout, format="{time} | {level} | {message}", level="INFO")

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ–∫–µ–Ω –∏ —á–∞—Ç."""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.post(url, json=data, timeout=10)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    try:
        conn = psycopg2.connect(
            host=PGHOST,
            port=PGPORT,
            user=PGUSER,
            password=PGPASSWORD,
            database=PGDATABASE
        )
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

# === SQL —Å—Ö–µ–º—ã ===
CREATE_TABLE_SQL = """
CREATE TABLE IF NOT EXISTS markets (
    id INTEGER PRIMARY KEY,
    question TEXT,
    created_at TIMESTAMP,
    active BOOLEAN,
    slug TEXT,
    condition_id TEXT,
    clob_token_ids TEXT[],
    enable_order_book BOOLEAN,
    volume NUMERIC,
    liquidity NUMERIC
);
"""

INSERT_MARKET_SQL = """
INSERT INTO markets (id, question, created_at, active, slug, condition_id, clob_token_ids, enable_order_book, volume, liquidity)
VALUES %s
ON CONFLICT (id) DO NOTHING;
"""

def ensure_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    conn = connect_db()
    if not conn:
        return False
    
    try:
        with conn.cursor() as cursor:
            cursor.execute(CREATE_TABLE_SQL)
        conn.commit()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ markets –≥–æ—Ç–æ–≤–∞")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False
    finally:
        conn.close()

def market_exists(market_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä—ã–Ω–æ–∫ –≤ –ë–î"""
    conn = connect_db()
    if not conn:
        return False
    
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT id FROM markets WHERE id = %s", (market_id,))
            return cursor.fetchone() is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞: {e}")
        return False
    finally:
        conn.close()

def save_markets(markets):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ –≤ –ë–î"""
    conn = connect_db()
    if not conn:
        return
    
    try:
        with conn.cursor() as cursor:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            market_data = []
            for market in markets:
                market_data.append((
                    get_id(market),
                    get_question(market),
                    get_creation_time(market),
                    get_active(market),
                    get_slug(market),
                    get_condition_id(market),
                    get_clob_token_ids(market),
                    get_enable_order_book(market),
                    get_volume(market),
                    get_liquidity(market)
                ))
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            execute_values(cursor, INSERT_MARKET_SQL, market_data)
            conn.commit()
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(markets)} –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤: {e}")
    finally:
        conn.close()

def delete_old_markets():
    """–£–¥–∞–ª—è–µ—Ç —Ä—ã–Ω–∫–∏ —Å—Ç–∞—Ä—à–µ RETENTION_HOURS —á–∞—Å–æ–≤"""
    RETENTION_HOURS = 25
    conn = connect_db()
    if not conn:
        return
    
    try:
        with conn.cursor() as cursor:
            cutoff_time = datetime.now(timezone.utc) - timedelta(hours=RETENTION_HOURS)
            cursor.execute(
                "DELETE FROM markets WHERE created_at < %s",
                (cutoff_time,)
            )
            deleted_count = cursor.rowcount
            conn.commit()
            if deleted_count > 0:
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Ä—ã–Ω–∫–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}")
    finally:
        conn.close()

# === –§—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API ===
def get_id(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ä—ã–Ω–∫–∞"""
    return market.get('id')

def get_question(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Ä—ã–Ω–∫–∞"""
    return market.get('question')

def get_creation_time(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—ã–Ω–∫–∞"""
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    time_fields = ['created_at', 'createdAt', 'start_date', 'startDate', 'created']
    for field in time_fields:
        if field in market and market[field]:
            try:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
                if isinstance(market[field], str):
                    return datetime.fromisoformat(market[field].replace('Z', '+00:00'))
                # –ï—Å–ª–∏ —ç—Ç–æ timestamp
                elif isinstance(market[field], (int, float)):
                    return datetime.fromtimestamp(market[field], tz=timezone.utc)
            except:
                continue
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    return datetime.now(timezone.utc)

def get_active(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    return market.get('active', False)

def get_slug(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç slug —Ä—ã–Ω–∫–∞"""
    return market.get('slug')

def get_condition_id(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç condition_id"""
    return market.get('condition_id')

def get_clob_token_ids(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç clob_token_ids –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ - clobTokenIds (–∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    token_ids = market.get('clobTokenIds', [])
    
    # –ï—Å–ª–∏ clobTokenIds –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ tokens –º–∞—Å—Å–∏–≤–∞
    if not token_ids:
        tokens = market.get('tokens', [])
        token_ids = [token.get('token_id') for token in tokens if token.get('token_id')]
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
    if isinstance(token_ids, list):
        return [str(tid) for tid in token_ids if tid]
    return []

def get_enable_order_book(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç enable_order_book"""
    return market.get('enable_order_book') or market.get('enableOrderBook', False)

def get_volume(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç volume"""
    volume = market.get('volume')
    if volume is not None:
        try:
            return float(volume)
        except:
            return None
    return None

def get_liquidity(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç liquidity"""
    liquidity = market.get('liquidity')
    if liquidity is not None:
        try:
            return float(liquidity)
        except:
            return None
    return None

def monitor_new_markets():
    params = {
        'active': True,
        'limit': 3,
        'order': 'startDate',
        'ascending': False
    }
    SKIP_PREFIXES = [
        "Bitcoin Up or Down",
        "Ethereum Up or Down",
        "Solana Up or Down",
        "XRP Up or Down"
    ]
    try:
        response = requests.get(API_URL, params=params, timeout=10)
        response.raise_for_status()
        markets = response.json()
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç API: {len(markets)} —Ä—ã–Ω–∫–æ–≤")
        
        new_markets = []
        skipped_special = 0
        already_exists = 0
        
        for market in markets:
            question = get_question(market) or ""
            if any(question.startswith(prefix) for prefix in SKIP_PREFIXES):
                skipped_special += 1
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–∏–µ —Ä—ã–Ω–∫–∏
            market_id = get_id(market)
            if not market_exists(market_id):
                new_markets.append(market)
                created_at = get_creation_time(market)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä—ã–Ω–æ–∫
                logger.info(f"üÜï –ù–æ–≤—ã–π —Ä—ã–Ω–æ–∫: {question}")
                logger.info(f"ID: {market_id}")
                logger.info(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}")
                logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π: {get_active(market)}")
                logger.info(f"Slug: {get_slug(market)}")
                logger.info(f"Condition ID: {get_condition_id(market)}")
                logger.info(f"CLOB Token IDs: {get_clob_token_ids(market)}")
                logger.info(f"Enable Order Book: {get_enable_order_book(market)}")
                logger.info(f"Volume: {get_volume(market)}")
                logger.info(f"Liquidity: {get_liquidity(market)}")
                logger.info("---")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                message = (
                    f"üÜï <b>–ù–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –Ω–∞ Polymarket!</b>\n\n"
                    f"üìã –í–æ–ø—Ä–æ—Å: {question}\n"
                    f"üÜî ID: {market_id}\n"
                    f"‚è∞ –°–æ–∑–¥–∞–Ω: {created_at}\n"
                    f"üîó Slug: {get_slug(market)}\n"
                    f"üìä –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if get_active(market) else '–ù–µ—Ç'}\n"
                    f"üìà –û–±—ä–µ–º: ${get_volume(market) or 'N/A'}\n"
                    f"üí∞ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${get_liquidity(market) or 'N/A'}\n"
                    f"üìö Order Book: {'–î–∞' if get_enable_order_book(market) else '–ù–µ—Ç'}"
                )
                send_telegram_message(message)
            else:
                already_exists += 1
        
        logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(new_markets)} –Ω–æ–≤—ã—Ö, {already_exists} —É–∂–µ –≤ –±–∞–∑–µ, {skipped_special} –ø—Ä–æ–ø—É—â–µ–Ω–æ (Up or Down)")
        
        if new_markets:
            save_markets(new_markets)
        else:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤. –ñ–¥—É...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gamma Markets API: {e}")

def main():
    logger.info("=== –ó–∞–ø—É—Å–∫ Polymarket Market Monitor ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not ensure_table():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    logger.info("üü¢ –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤...")
    
    while True:
        try:
            monitor_new_markets()
            delete_old_markets()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            time.sleep(POLL_INTERVAL)
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Polymarket Market Monitor...")
            break
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(30)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    logger.info("=== Polymarket Market Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ===")

if __name__ == "__main__":
    main() 