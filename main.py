"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Polymarket Factory Monitor
–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Å–µ —Ñ–∞–±—Ä–∏–∫–∏ Polymarket –Ω–∞ Polygon
"""

import requests
import time
import os
import sys
import psycopg2
from psycopg2.extras import execute_values
from loguru import logger
from datetime import datetime, timedelta, timezone
from enum import Enum

# === –ö–æ–Ω—Ñ–∏–≥ ===
API_URL = os.getenv("API_URL")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", 30))  # —Å–µ–∫—É–Ω–¥

# === Telegram –∫–æ–Ω—Ñ–∏–≥ ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (Railway) ===
PGHOST = os.getenv("PGHOST")
PGPORT = os.getenv("PGPORT", "5432")
PGUSER = os.getenv("PGUSER")
PGPASSWORD = os.getenv("PGPASSWORD")
PGDATABASE = os.getenv("PGDATABASE")

logger.remove()
logger.add(sys.stdout, format="{time} | {level} | {message}", level="INFO")

class MarketStatus(Enum):
    CREATED = "created"           # –ï—Å—Ç—å –≤ Gamma API
    TRADING_READY = "trading_ready"  # –ï—Å—Ç—å –≤ CLOB API
    NOT_TRADEABLE = "not_tradeable"  # enableOrderBook = False

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ–∫–µ–Ω –∏ —á–∞—Ç."""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.post(url, json=data, timeout=10)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def get_market_status(slug):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Gamma API
    gamma_data = get_market_ids_from_gamma_api(slug)
    if not gamma_data[0]:  # condition_id –Ω–µ –Ω–∞–π–¥–µ–Ω
        return {
            "status": "not_found",
            "error": "Market not found in Gamma API"
        }
    
    condition_id, token_ids, gamma_error = gamma_data
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º enableOrderBook —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    try:
        gamma_response = requests.get(
            "https://gamma-api.polymarket.com/markets",
            params={"slug": slug, "active": True},
            timeout=10
        )
        gamma_response.raise_for_status()
        markets = gamma_response.json()
        
        if markets:
            market = markets[0]
            enable_order_book = market.get("enableOrderBook", False)
            
            if not enable_order_book:
                return {
                    "status": MarketStatus.NOT_TRADEABLE.value,
                    "condition_id": condition_id,
                    "token_ids": token_ids,
                    "message": "Market created but trading disabled"
                }
        else:
            return {
                "status": "not_found",
                "error": "Market not found in Gamma API"
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ enableOrderBook: {e}")
        return {
            "status": "error",
            "error": f"Error checking enableOrderBook: {e}"
        }
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º CLOB API
    clob_data = get_market_ids_from_clob(slug)
    if clob_data[0]:  # condition_id –Ω–∞–π–¥–µ–Ω –≤ CLOB
        return {
            "status": MarketStatus.TRADING_READY.value,
            "condition_id": clob_data[0],
            "token_ids": clob_data[1],
            "message": "Market ready for trading"
        }
    
    # 4. –†—ã–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω, –Ω–æ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ
    return {
        "status": MarketStatus.CREATED.value,
        "condition_id": condition_id,
        "token_ids": token_ids,
        "message": "Market created, waiting for trading activation",
        "estimated_wait_time": "Usually 5-30 minutes"
    }

def get_market_ids_from_clob(slug):
    """
    –ü–æ–ª—É—á–∞–µ—Ç condition_id –∏ token_ids —á–µ—Ä–µ–∑ CLOB API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    """
    try:
        logger.info(f"üîç –ò—â—É –¥–∞–Ω–Ω—ã–µ –¥–ª—è slug: {slug}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä—ã–Ω–∫–∏ –∏–∑ CLOB API
        clob_response = requests.get("https://clob.polymarket.com/markets", timeout=10)
        clob_response.raise_for_status()
        
        clob_data = clob_response.json()
        clob_markets = clob_data.get("data", [])
        
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(clob_markets)} —Ä—ã–Ω–∫–æ–≤ –∏–∑ CLOB API")
        
        # –ò—â–µ–º —Ä—ã–Ω–æ–∫ –ø–æ slug –≤ market_slug –ø–æ–ª–µ
        found_market = None
        for market in clob_markets:
            market_slug = market.get("market_slug")
            if market_slug == slug:
                found_market = market
                break
        
        if found_market:
            condition_id = found_market.get("condition_id")
            token_ids = [token["token_id"] for token in found_market.get("tokens", [])]
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä—ã–Ω–æ–∫ –≤ CLOB API:")
            logger.info(f"   Condition ID: {condition_id}")
            logger.info(f"   Token IDs: {token_ids}")
            
            return condition_id, token_ids, None
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ slug'–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            sample_slugs = [m.get("market_slug") for m in clob_markets[:5]]
            logger.warning(f"‚ùå –†—ã–Ω–æ–∫ {slug} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CLOB API (–Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è)")
            logger.warning(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ slug'—ã (–ø–µ—Ä–≤—ã–µ 5): {sample_slugs}")
            
            return None, None, "Market not found in CLOB (not tradeable)"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CLOB API: {e}")
        return None, None, f"CLOB API error: {e}"

def get_market_ids_from_gamma_api(slug):
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è condition_id —á–µ—Ä–µ–∑ Gamma API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """
    try:
        logger.info(f"üîç –ü—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Gamma API –¥–ª—è slug: {slug}")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Gamma API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        gamma_response = requests.get(
            "https://gamma-api.polymarket.com/markets",
            params={"slug": slug, "active": True},
            timeout=10
        )
        gamma_response.raise_for_status()
        
        markets = gamma_response.json()
        if markets:
            market = markets[0]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ Gamma API
            condition_id = market.get("conditionId")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
            clob_token_ids = market.get("clobTokenIds", [])  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
            
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ Gamma API:")
            logger.info(f"   Condition ID: {condition_id}")
            logger.info(f"   Token IDs: {clob_token_ids}")
            
            return condition_id, clob_token_ids, None
        else:
            return None, None, "Market not found in Gamma API"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Gamma API: {e}")
        return None, None, f"Gamma API error: {e}"

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    try:
        conn = psycopg2.connect(
            host=PGHOST,
            port=PGPORT,
            user=PGUSER,
            password=PGPASSWORD,
            database=PGDATABASE
        )
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

# === SQL —Å—Ö–µ–º—ã ===
CREATE_TABLE_SQL = """
CREATE TABLE IF NOT EXISTS markets (
    id INTEGER PRIMARY KEY,
    question TEXT,
    created_at TIMESTAMP,
    active BOOLEAN,
    slug TEXT,
    condition_id TEXT,
    clob_token_ids TEXT[],
    enable_order_book BOOLEAN,
    volume NUMERIC,
    liquidity NUMERIC,
    market_status TEXT DEFAULT 'created',
    trading_activated_at TIMESTAMP NULL
);
"""

INSERT_MARKET_SQL = """
INSERT INTO markets (id, question, created_at, active, slug, condition_id, clob_token_ids, enable_order_book, volume, liquidity, market_status)
VALUES %s
ON CONFLICT (id) DO UPDATE SET
    condition_id = EXCLUDED.condition_id,
    clob_token_ids = EXCLUDED.clob_token_ids,
    market_status = EXCLUDED.market_status,
    trading_activated_at = CASE 
        WHEN EXCLUDED.market_status = 'trading_ready' AND markets.market_status != 'trading_ready' 
        THEN NOW() 
        ELSE markets.trading_activated_at 
    END;
"""

def ensure_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    conn = connect_db()
    if not conn:
        return False
    
    try:
        with conn.cursor() as cursor:
            cursor.execute(CREATE_TABLE_SQL)
        conn.commit()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ markets –≥–æ—Ç–æ–≤–∞")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False
    finally:
        conn.close()

def market_exists(market_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä—ã–Ω–æ–∫ –≤ –ë–î"""
    conn = connect_db()
    if not conn:
        return False
    
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT id FROM markets WHERE id = %s", (market_id,))
            exists = cursor.fetchone() is not None
            if exists:
                logger.debug(f"–†—ã–Ω–æ–∫ {market_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
            return exists
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞: {e}")
        return False
    finally:
        conn.close()

def get_pending_markets():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä—ã–Ω–∫–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    conn = connect_db()
    if not conn:
        return []
    
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "SELECT id, slug, created_at FROM markets WHERE market_status = 'created' ORDER BY created_at DESC"
            )
            return cursor.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending —Ä—ã–Ω–∫–æ–≤: {e}")
        return []
    finally:
        conn.close()

def update_market_status(market_id, status, condition_id=None, clob_token_ids=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞ –≤ –ë–î"""
    conn = connect_db()
    if not conn:
        return False
    
    try:
        with conn.cursor() as cursor:
            if status == MarketStatus.TRADING_READY.value:
                cursor.execute(
                    "UPDATE markets SET market_status = %s, trading_activated_at = NOW(), condition_id = %s, clob_token_ids = %s WHERE id = %s",
                    (status, condition_id, clob_token_ids, market_id)
                )
            else:
                cursor.execute(
                    "UPDATE markets SET market_status = %s WHERE id = %s",
                    (status, market_id)
                )
        conn.commit()
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞ {market_id}: {status}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞: {e}")
        return False
    finally:
        conn.close()

def save_markets(markets):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ –≤ –ë–î"""
    conn = connect_db()
    if not conn:
        return
    
    try:
        with conn.cursor() as cursor:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            market_data = []
            for market in markets:
                market_data.append((
                    get_id(market),
                    get_question(market),
                    get_creation_time(market),
                    get_active(market),
                    get_slug(market),
                    get_condition_id(market),
                    get_clob_token_ids(market),
                    get_enable_order_book(market),
                    get_volume(market),
                    get_liquidity(market),
                    get_market_status_from_data(market)
                ))
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            execute_values(cursor, INSERT_MARKET_SQL, market_data)
            conn.commit()
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(markets)} –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤: {e}")
    finally:
        conn.close()

def delete_old_markets():
    """–£–¥–∞–ª—è–µ—Ç —Ä—ã–Ω–∫–∏ —Å—Ç–∞—Ä—à–µ RETENTION_HOURS —á–∞—Å–æ–≤ (–∫—Ä–æ–º–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)"""
    RETENTION_HOURS = 25
    conn = connect_db()
    if not conn:
        return
    
    try:
        with conn.cursor() as cursor:
            cutoff_time = datetime.now(timezone.utc) - timedelta(hours=RETENTION_HOURS)
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä—ã–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –≤ —Å—Ç–∞—Ç—É—Å–µ 'created' (–Ω–µ –æ–∂–∏–¥–∞—é—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
            cursor.execute(
                "DELETE FROM markets WHERE created_at < %s AND market_status != 'created'",
                (cutoff_time,)
            )
            deleted_count = cursor.rowcount
            conn.commit()
            if deleted_count > 0:
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Ä—ã–Ω–∫–æ–≤ (–Ω–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}")
    finally:
        conn.close()

# === –§—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API ===
def get_id(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ä—ã–Ω–∫–∞"""
    return market.get('id')

def get_question(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Ä—ã–Ω–∫–∞"""
    return market.get('question')

def get_creation_time(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—ã–Ω–∫–∞"""
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    time_fields = ['created_at', 'createdAt', 'start_date', 'startDate', 'created']
    for field in time_fields:
        if field in market and market[field]:
            try:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
                if isinstance(market[field], str):
                    dt = datetime.fromisoformat(market[field].replace('Z', '+00:00'))
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É datetime –µ—Å—Ç—å timezone
                    if dt.tzinfo is None:
                        dt = dt.replace(tzinfo=timezone.utc)
                    return dt
                # –ï—Å–ª–∏ —ç—Ç–æ timestamp
                elif isinstance(market[field], (int, float)):
                    return datetime.fromtimestamp(market[field], tz=timezone.utc)
            except:
                continue
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    return datetime.now(timezone.utc)

def get_active(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    return market.get('active', False)

def get_slug(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç slug —Ä—ã–Ω–∫–∞"""
    return market.get('slug')

def get_condition_id(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç condition_id –∏–∑ –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–≥–æ market –æ–±—ä–µ–∫—Ç–∞"""
    return market.get('condition_id')

def get_clob_token_ids(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç clob_token_ids –∏–∑ –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–≥–æ market –æ–±—ä–µ–∫—Ç–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º token_ids –∏–∑ –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–≥–æ market –æ–±—ä–µ–∫—Ç–∞
    token_ids = market.get('clob_token_ids', [])
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
    if isinstance(token_ids, list):
        return [str(tid) for tid in token_ids if tid]
    return []

def get_enable_order_book(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç enable_order_book"""
    return market.get('enable_order_book') or market.get('enableOrderBook', False)

def get_volume(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç volume"""
    volume = market.get('volume')
    if volume is not None:
        try:
            return float(volume)
        except:
            return None
    return None

def get_liquidity(market):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç liquidity"""
    liquidity = market.get('liquidity')
    if liquidity is not None:
        try:
            return float(liquidity)
        except:
            return None
    return None

def get_market_status_from_data(market):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    return market.get('market_status', MarketStatus.CREATED.value)

def monitor_new_markets():
    params = {
        'active': True,
        'limit': 3,
        'order': 'startDate',
        'ascending': False
    }
    SKIP_PREFIXES = [
        "Bitcoin Up or Down",
        "Ethereum Up or Down",
        "Solana Up or Down",
        "XRP Up or Down"
    ]
    try:
        response = requests.get(API_URL, params=params, timeout=10)
        response.raise_for_status()
        markets = response.json()
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç API: {len(markets)} —Ä—ã–Ω–∫–æ–≤")
        
        new_markets = []
        skipped_special = 0
        already_exists = 0
        
        for market in markets:
            question = get_question(market) or ""
            if any(question.startswith(prefix) for prefix in SKIP_PREFIXES):
                skipped_special += 1
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–∏–µ —Ä—ã–Ω–∫–∏
            
            market_id = get_id(market)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ë–î
            if market_exists(market_id):
                already_exists += 1
                logger.debug(f"–†—ã–Ω–æ–∫ {market_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
            
            logger.info(f"üÜï –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤—ã–π —Ä—ã–Ω–æ–∫: {market_id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞
            slug = get_slug(market)
            status_info = get_market_status(slug)
            
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞ {slug}: {status_info['status']}")
            
            # –û–±–æ–≥–∞—â–∞–µ–º market –¥–∞–Ω–Ω—ã–º–∏
            market['condition_id'] = status_info.get('condition_id')
            market['clob_token_ids'] = status_info.get('token_ids', [])
            market['market_status'] = status_info['status']
            
            new_markets.append(market)
            created_at = get_creation_time(market)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä—ã–Ω–æ–∫
            logger.info(f"üÜï –ù–æ–≤—ã–π —Ä—ã–Ω–æ–∫: {question}")
            logger.info(f"ID: {market_id}")
            logger.info(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}")
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π: {get_active(market)}")
            logger.info(f"Slug: {get_slug(market)}")
            logger.info(f"Condition ID: {get_condition_id(market)}")
            logger.info(f"CLOB Token IDs: {get_clob_token_ids(market)}")
            logger.info(f"Enable Order Book: {get_enable_order_book(market)}")
            logger.info(f"Volume: {get_volume(market)}")
            logger.info(f"Liquidity: {get_liquidity(market)}")
            logger.info(f"–°—Ç–∞—Ç—É—Å: {status_info['status']}")
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {status_info.get('message', 'N/A')}")
            logger.info("---")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            message = (
                f"üÜï <b>–ù–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –Ω–∞ Polymarket!</b>\n\n"
                f"üìã –í–æ–ø—Ä–æ—Å: {question}\n"
                f"üÜî ID: {market_id}\n"
                f"‚è∞ –°–æ–∑–¥–∞–Ω: {created_at}\n"
                f"üîó Slug: {get_slug(market)}\n"
                f"üìä –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if get_active(market) else '–ù–µ—Ç'}\n"
                f"üìà –û–±—ä–µ–º: ${get_volume(market) or 'N/A'}\n"
                f"üí∞ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${get_liquidity(market) or 'N/A'}\n"
                f"üìö Order Book: {'–î–∞' if get_enable_order_book(market) else '–ù–µ—Ç'}\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {status_info['status']}"
            )
            send_telegram_message(message)
        
        logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(new_markets)} –Ω–æ–≤—ã—Ö, {already_exists} —É–∂–µ –≤ –±–∞–∑–µ, {skipped_special} –ø—Ä–æ–ø—É—â–µ–Ω–æ (Up or Down)")
        
        if new_markets:
            save_markets(new_markets)
        else:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤. –ñ–¥—É...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gamma Markets API: {e}")

def check_pending_markets():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä—ã–Ω–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    pending_markets = get_pending_markets()
    
    if not pending_markets:
        return
    
    logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é {len(pending_markets)} —Ä—ã–Ω–∫–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...")
    
    for market_id, slug, created_at in pending_markets:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è {slug} (ID: {market_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞
        status_info = get_market_status(slug)
        
        if status_info['status'] == MarketStatus.TRADING_READY.value:
            logger.info(f"‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {slug}!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            update_market_status(
                market_id, 
                MarketStatus.TRADING_READY.value,
                status_info.get('condition_id'),
                status_info.get('token_ids', [])
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            message = (
                f"üéâ <b>–¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                f"üìã –†—ã–Ω–æ–∫: {slug}\n"
                f"üÜî ID: {market_id}\n"
                f"‚è∞ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {datetime.now(timezone.utc)}\n"
                f"üÜî Condition ID: {status_info.get('condition_id')}\n"
                f"üî¢ Token IDs: {len(status_info.get('token_ids', []))}"
            )
            send_telegram_message(message)
            
        elif status_info['status'] == MarketStatus.NOT_TRADEABLE.value:
            logger.info(f"‚ùå –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è {slug}")
            update_market_status(market_id, MarketStatus.NOT_TRADEABLE.value)
            
        else:
            # –†—ã–Ω–æ–∫ –≤—Å–µ –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å timezone
            current_time = datetime.now(timezone.utc)
            if created_at.tzinfo is None:
                # –ï—Å–ª–∏ created_at –±–µ–∑ timezone, –¥–æ–±–∞–≤–ª—è–µ–º UTC
                created_at = created_at.replace(tzinfo=timezone.utc)
            
            elapsed = current_time - created_at
            logger.info(f"‚è≥ {slug} –≤—Å–µ –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ({elapsed.total_seconds()/60:.1f} –º–∏–Ω—É—Ç)")

def cleanup_inactive_markets():
    """–£–¥–∞–ª—è–µ—Ç —Ä—ã–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 12 —á–∞—Å–æ–≤"""
    MAX_WAIT_HOURS = 12
    conn = connect_db()
    if not conn:
        return
    
    try:
        with conn.cursor() as cursor:
            # –ù–∞—Ö–æ–¥–∏–º —Ä—ã–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω—ã –±–æ–ª–µ–µ 12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –∏ –≤—Å–µ –µ—â–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'created'
            cutoff_time = datetime.now(timezone.utc) - timedelta(hours=MAX_WAIT_HOURS)
            
            cursor.execute("""
                SELECT id, slug, created_at, market_status 
                FROM markets 
                WHERE market_status = 'created' AND created_at < %s
            """, (cutoff_time,))
            
            inactive_markets = cursor.fetchall()
            
            if inactive_markets:
                logger.info(f"üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(inactive_markets)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ (—Å—Ç–∞—Ä—à–µ {MAX_WAIT_HOURS} —á–∞—Å–æ–≤)")
                
                for market_id, slug, created_at, status in inactive_markets:
                    elapsed_hours = (datetime.now(timezone.utc) - created_at).total_seconds() / 3600
                    logger.info(f"   –£–¥–∞–ª—è—é —Ä—ã–Ω–æ–∫ {slug} (ID: {market_id}) - {elapsed_hours:.1f} —á–∞—Å–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è")
                
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏
                cursor.execute("""
                    DELETE FROM markets 
                    WHERE market_status = 'created' AND created_at < %s
                """, (cutoff_time,))
                
                deleted_count = cursor.rowcount
                conn.commit()
                
                if deleted_count > 0:
                    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                    message = (
                        f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏</b>\n\n"
                        f"‚è∞ –£–¥–∞–ª–µ–Ω–æ: {deleted_count} —Ä—ã–Ω–∫–æ–≤\n"
                        f"‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {MAX_WAIT_HOURS} —á–∞—Å–æ–≤\n"
                        f"üìÖ –í—Ä–µ–º—è: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')} UTC"
                    )
                    send_telegram_message(message)
            else:
                logger.debug(f"‚úÖ –ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {POLL_INTERVAL} —Å–µ–∫—É–Ω–¥)")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}")
    finally:
        conn.close()

def main():
    logger.info("=== –ó–∞–ø—É—Å–∫ Polymarket Market Monitor ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not ensure_table():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    logger.info("üü¢ –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤...")
    
    while True:
        try:
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤
            monitor_new_markets()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ pending —Ä—ã–Ω–∫–æ–≤
            check_pending_markets()
            
            # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏ (—Å—Ç–∞—Ä—à–µ 12 —á–∞—Å–æ–≤)
            cleanup_inactive_markets()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            delete_old_markets()
            
            time.sleep(POLL_INTERVAL)
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Polymarket Market Monitor...")
            break
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(30)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    logger.info("=== Polymarket Market Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ===")

if __name__ == "__main__":
    main() 