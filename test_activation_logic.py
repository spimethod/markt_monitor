import requests
import time
from datetime import datetime, timezone

def test_market_status():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–æ–≤"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ –∏–∑ –≤–∞—à–∏—Ö –ª–æ–≥–æ–≤
    test_markets = [
        "houthi-strike-on-israel-by-august-31-996",
        "syria-strikes-israel-by-december-31"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–æ–≤")
    print("=" * 60)
    
    for slug in test_markets:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É—é —Ä—ã–Ω–æ–∫: {slug}")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Gamma API
        print("   üìä –ü—Ä–æ–≤–µ—Ä—è—é Gamma API...")
        try:
            gamma_response = requests.get(
                "https://gamma-api.polymarket.com/markets",
                params={"slug": slug, "active": True},
                timeout=10
            )
            gamma_response.raise_for_status()
            gamma_markets = gamma_response.json()
            
            if gamma_markets:
                market = gamma_markets[0]
                condition_id = market.get("conditionId")
                enable_order_book = market.get("enableOrderBook", False)
                
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ Gamma API:")
                print(f"      Condition ID: {condition_id}")
                print(f"      Enable Order Book: {enable_order_book}")
                
                if not enable_order_book:
                    print(f"   ‚ùå –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (enableOrderBook = False)")
                    continue
            else:
                print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ Gamma API")
                continue
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ Gamma API: {e}")
            continue
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º CLOB API
        print("   üìä –ü—Ä–æ–≤–µ—Ä—è—é CLOB API...")
        try:
            clob_response = requests.get("https://clob.polymarket.com/markets", timeout=10)
            clob_response.raise_for_status()
            clob_data = clob_response.json()
            clob_markets = clob_data.get("data", [])
            
            # –ò—â–µ–º —Ä—ã–Ω–æ–∫ –ø–æ slug
            found_in_clob = False
            for market in clob_markets:
                if market.get("market_slug") == slug:
                    clob_condition_id = market.get("condition_id")
                    clob_token_ids = [token["token_id"] for token in market.get("tokens", [])]
                    
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ CLOB API:")
                    print(f"      Condition ID: {clob_condition_id}")
                    print(f"      Token IDs: {clob_token_ids}")
                    print(f"   üéâ –°—Ç–∞—Ç—É—Å: TRADING_READY")
                    found_in_clob = True
                    break
            
            if not found_in_clob:
                print(f"   ‚è≥ –ù–µ –Ω–∞–π–¥–µ–Ω –≤ CLOB API (–æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)")
                print(f"   üìä –°—Ç–∞—Ç—É—Å: CREATED (–æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏)")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ CLOB API: {e}")
            print(f"   üìä –°—Ç–∞—Ç—É—Å: CREATED (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CLOB)")
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

def test_new_market_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤")
    print("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä—ã–Ω–∫–∏ –∏–∑ Gamma API
        response = requests.get(
            "https://gamma-api.polymarket.com/markets",
            params={
                'active': True,
                'limit': 5,
                'order': 'startDate',
                'ascending': False
            },
            timeout=10
        )
        response.raise_for_status()
        markets = response.json()
        
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(markets)} —Ä—ã–Ω–∫–æ–≤ –∏–∑ Gamma API")
        
        for i, market in enumerate(markets[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            question = market.get('question', 'N/A')
            slug = market.get('slug', 'N/A')
            market_id = market.get('id', 'N/A')
            created_at = market.get('createdAt', 'N/A')
            
            print(f"\nüÜï –†—ã–Ω–æ–∫ {i+1}:")
            print(f"   ID: {market_id}")
            print(f"   –í–æ–ø—Ä–æ—Å: {question}")
            print(f"   Slug: {slug}")
            print(f"   –°–æ–∑–¥–∞–Ω: {created_at}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            if slug != 'N/A':
                print(f"   üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å...")
                
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ CLOB
                try:
                    clob_response = requests.get("https://clob.polymarket.com/markets", timeout=5)
                    clob_data = clob_response.json()
                    clob_markets = clob_data.get("data", [])
                    
                    found_in_clob = any(m.get("market_slug") == slug for m in clob_markets)
                    
                    if found_in_clob:
                        print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: TRADING_READY")
                    else:
                        print(f"   ‚è≥ –°—Ç–∞—Ç—É—Å: CREATED (–æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)")
                        
                except:
                    print(f"   ‚ùì –°—Ç–∞—Ç—É—Å: –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CLOB)")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    test_market_status()
    test_new_market_detection() 