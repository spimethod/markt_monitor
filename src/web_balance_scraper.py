"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Polymarket
–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å credentials —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple
from loguru import logger

import aiohttp
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

from src.config.settings import config


class PolymarketWebScraper:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Polymarket"""

    def __init__(self):
        self.session = None
        self.last_login = None
        self.session_lifetime = timedelta(hours=2)  # –°–µ—Å—Å–∏—è –∂–∏–≤–µ—Ç 2 —á–∞—Å–∞
        self.cookies = {}
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-origin'
        }
        
    def _get_credentials(self) -> Tuple[Optional[str], Optional[str]]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (email, password) –∏–ª–∏ (None, None)
        """
        try:
            # Credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ù–ï —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–æ–¥–µ!)
            email = config.polymarket.POLYMARKET_EMAIL if hasattr(config.polymarket, 'POLYMARKET_EMAIL') else None
            password = config.polymarket.POLYMARKET_PASSWORD if hasattr(config.polymarket, 'POLYMARKET_PASSWORD') else None
            
            if not email or not password:
                logger.warning("POLYMARKET_EMAIL –∏–ª–∏ POLYMARKET_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return None, None
                
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if email in ["test@example.com", "your_email@example.com"] or password in ["password", "your_password"]:
                logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ credentials, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return None, None
                
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã credentials –¥–ª—è {email[:3]}***@{email.split('@')[1] if '@' in email else 'unknown'}")
            return email, password
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è credentials: {e}")
            return None, None

    def _create_session(self) -> requests.Session:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—É—é HTTP —Å–µ—Å—Å–∏—é —Å retry logic"""
        session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["GET", "POST"]
        )
        
        adapter = HTTPAdapter(max_retries=retry_strategy)
        session.mount("http://", adapter)
        session.mount("https://", adapter)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º headers
        session.headers.update(self.headers)
        
        return session

    async def _login_if_needed(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç login –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –≥–æ—Ç–æ–≤–∞, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ login
            if (self.session and self.last_login and 
                datetime.now() - self.last_login < self.session_lifetime):
                logger.debug("–°–µ—Å—Å–∏—è –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, login –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º credentials
            email, password = self._get_credentials()
            if not email or not password:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å credentials –¥–ª—è –≤—Ö–æ–¥–∞")
                return False
            
            logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ Polymarket –¥–ª—è {email[:3]}***@{email.split('@')[1]}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            if self.session:
                self.session.close()
            self.session = self._create_session()
            
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è cookies
            main_response = self.session.get('https://polymarket.com', timeout=15)
            if main_response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {main_response.status_code}")
                return False
                
            logger.debug("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –®–∞–≥ 2: –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            login_success = await self._try_login_methods(email, password)
            
            if login_success:
                self.last_login = datetime.now()
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Polymarket ({email[:3]}***@{email.split('@')[1]})")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Polymarket")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Polymarket: {e}")
            return False

    async def _try_login_methods(self, email: str, password: str) -> bool:
        """–ü—Ä–æ–±—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—Ö–æ–¥–∞ –≤ Polymarket"""
        
        # –ú–µ—Ç–æ–¥ 1: Magic Link / Email login (–Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π)
        if await self._try_magic_link_login(email):
            return True
            
        # –ú–µ—Ç–æ–¥ 2: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π email/password login
        if await self._try_email_password_login(email, password):
            return True
            
        # –ú–µ—Ç–æ–¥ 3: OAuth/Social login detection
        if await self._try_social_login_detection():
            return True
            
        return False

    async def _try_magic_link_login(self, email: str) -> bool:
        """–ü—Ä–æ–±—É–µ—Ç –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Magic Link"""
        try:
            logger.info("üîó –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Magic Link")
            
            # –ò—â–µ–º API endpoint –¥–ª—è Magic Link
            magic_endpoints = [
                'https://polymarket.com/api/auth/magic-link',
                'https://auth.magic.link/v1/login',
                'https://polymarket.com/auth/email'
            ]
            
            for endpoint in magic_endpoints:
                try:
                    response = self.session.post(
                        endpoint,
                        json={'email': email},
                        timeout=10
                    )
                    
                    if response.status_code in [200, 202]:
                        logger.info(f"‚úÖ Magic Link –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {endpoint}")
                        logger.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ email!")
                        logger.warning("   –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ –≤ email, —Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞")
                        
                        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
                        await asyncio.sleep(30)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –ª–∏ —Å–µ—Å—Å–∏—è
                        if await self._check_session_validity():
                            return True
                            
                except Exception as e:
                    logger.debug(f"Magic Link endpoint {endpoint} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                    continue
                    
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Magic Link –≤—Ö–æ–¥–∞: {e}")
            return False

    async def _try_email_password_login(self, email: str, password: str) -> bool:
        """–ü—Ä–æ–±—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π email/password –≤—Ö–æ–¥"""
        try:
            logger.info("üîë –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ email/password –≤—Ö–æ–¥–∞")
            
            login_endpoints = [
                'https://polymarket.com/api/auth/login',
                'https://polymarket.com/auth/login',
                'https://api.polymarket.com/auth/login'
            ]
            
            login_data = {
                'email': email,
                'password': password
            }
            
            for endpoint in login_endpoints:
                try:
                    response = self.session.post(
                        endpoint,
                        json=login_data,
                        timeout=10
                    )
                    
                    if response.status_code == 200:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ {endpoint}")
                        return True
                    elif response.status_code == 401:
                        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ credentials –¥–ª—è {endpoint}")
                    else:
                        logger.debug(f"Login endpoint {endpoint} –≤–µ—Ä–Ω—É–ª {response.status_code}")
                        
                except Exception as e:
                    logger.debug(f"Login endpoint {endpoint} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                    continue
                    
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ email/password –≤—Ö–æ–¥–∞: {e}")
            return False

    async def _try_social_login_detection(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            login_page = self.session.get('https://polymarket.com/login', timeout=10)
            if login_page.status_code == 200:
                content = login_page.text.lower()
                
                social_methods = []
                if 'google' in content:
                    social_methods.append('Google')
                if 'github' in content:
                    social_methods.append('GitHub')
                if 'discord' in content:
                    social_methods.append('Discord')
                if 'metamask' in content or 'wallet' in content:
                    social_methods.append('MetaMask/Wallet')
                    
                if social_methods:
                    logger.info(f"üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–µ—Ç–æ–¥—ã –≤—Ö–æ–¥–∞: {', '.join(social_methods)}")
                    logger.warning("‚ö†Ô∏è –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
                    
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {e}")
            return False

    async def _check_session_validity(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile_endpoints = [
                'https://polymarket.com/api/user/profile',
                'https://polymarket.com/api/auth/me',
                'https://polymarket.com/portfolio'
            ]
            
            for endpoint in profile_endpoints:
                try:
                    response = self.session.get(endpoint, timeout=10)
                    if response.status_code == 200:
                        logger.debug(f"‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {endpoint})")
                        return True
                except:
                    continue
                    
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return False

    async def get_balance_from_web(self) -> Optional[Dict[str, float]]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {'balance': float, 'profit_loss': float} –∏–ª–∏ None
        """
        try:
            logger.info("üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Polymarket")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º login –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not await self._login_if_needed():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å portfolio —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            balance_data = await self._fetch_portfolio_data()
            if balance_data:
                logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: ${balance_data.get('balance', 0):.2f}")
                return balance_data
            
            # Fallback: –ø—Ä–æ–±—É–µ–º API endpoints
            api_balance = await self._fetch_balance_via_api()
            if api_balance:
                logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ API: ${api_balance.get('balance', 0):.2f}")
                return api_balance
                
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –≤–µ–±: {e}")
            return None

    async def _fetch_portfolio_data(self) -> Optional[Dict[str, float]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å portfolio —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            logger.debug("üìä –ó–∞–≥—Ä—É–∑–∫–∞ portfolio —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º portfolio —Å—Ç—Ä–∞–Ω–∏—Ü—É
            portfolio_response = self.session.get(
                'https://polymarket.com/portfolio',
                timeout=15
            )
            
            if portfolio_response.status_code != 200:
                logger.warning(f"Portfolio —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {portfolio_response.status_code}")
                return None
            
            content = portfolio_response.text
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ HTML/JavaScript
            balance_data = self._parse_portfolio_html(content)
            if balance_data:
                return balance_data
            
            # –ò—â–µ–º AJAX –≤—ã–∑–æ–≤—ã –≤ Network tab
            ajax_data = await self._fetch_portfolio_ajax()
            if ajax_data:
                return ajax_data
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ portfolio: {e}")
            return None

    def _parse_portfolio_html(self, html_content: str) -> Optional[Dict[str, float]]:
        """–ü–∞—Ä—Å–∏—Ç –±–∞–ª–∞–Ω—Å –∏–∑ HTML content portfolio —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            import re
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
            balance_patterns = [
                r'portfolio["\s]*:[\s]*["$]?([\d,]+\.?\d*)',
                r'balance["\s]*:[\s]*["$]?([\d,]+\.?\d*)',
                r'cash["\s]*:[\s]*["$]?([\d,]+\.?\d*)',
                r'\$?([\d,]+\.?\d*)\s*</.*>.*portfolio',
                r'value["\s]*:[\s]*["$]?([\d,]+\.?\d*)'
            ]
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è P&L
            pnl_patterns = [
                r'profit["\s]*:[\s]*[-$]?([\d,]+\.?\d*)',
                r'loss["\s]*:[\s]*[-$]?([\d,]+\.?\d*)',
                r'pnl["\s]*:[\s]*[-$]?([\d,]+\.?\d*)',
                r'[-]?\$?([\d,]+\.?\d*)\s*</.*>.*profit'
            ]
            
            balance = None
            profit_loss = None
            
            # –ò—â–µ–º –±–∞–ª–∞–Ω—Å
            for pattern in balance_patterns:
                match = re.search(pattern, html_content, re.IGNORECASE)
                if match:
                    balance_str = match.group(1).replace(',', '')
                    try:
                        balance = float(balance_str)
                        logger.debug(f"–ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å –≤ HTML: ${balance}")
                        break
                    except ValueError:
                        continue
            
            # –ò—â–µ–º P&L
            for pattern in pnl_patterns:
                match = re.search(pattern, html_content, re.IGNORECASE)
                if match:
                    pnl_str = match.group(1).replace(',', '')
                    try:
                        profit_loss = float(pnl_str)
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                        if 'loss' in match.group(0).lower() or '-' in match.group(0):
                            profit_loss = -abs(profit_loss)
                        logger.debug(f"–ù–∞–π–¥–µ–Ω P&L –≤ HTML: {profit_loss}")
                        break
                    except ValueError:
                        continue
            
            if balance is not None:
                return {
                    'balance': balance,
                    'profit_loss': profit_loss or 0.0,
                    'source': 'html_parsing'
                }
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
            return None

    async def _fetch_portfolio_ajax(self) -> Optional[Dict[str, float]]:
        """–ü—Ä–æ–±—É–µ—Ç –Ω–∞–π—Ç–∏ AJAX endpoints –¥–ª—è portfolio –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.debug("üîç –ü–æ–∏—Å–∫ AJAX endpoints –¥–ª—è portfolio")
            
            # –°–ø–∏—Å–æ–∫ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö API endpoints
            api_endpoints = [
                'https://polymarket.com/api/portfolio',
                'https://polymarket.com/api/user/balance',
                'https://polymarket.com/api/wallet/balance',
                'https://api.polymarket.com/portfolio',
                'https://data-api.polymarket.com/portfolio',
                'https://polymarket.com/api/positions/summary'
            ]
            
            for endpoint in api_endpoints:
                try:
                    response = self.session.get(endpoint, timeout=10)
                    if response.status_code == 200:
                        data = response.json()
                        logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç {endpoint}")
                        
                        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                        balance_data = self._parse_api_response(data, endpoint)
                        if balance_data:
                            return balance_data
                            
                except Exception as e:
                    logger.debug(f"AJAX endpoint {endpoint} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                    continue
                    
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            return None

    def _parse_api_response(self, data: Dict, endpoint: str) -> Optional[Dict[str, float]]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç API –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        try:
            balance = None
            profit_loss = None
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            if isinstance(data, dict):
                # –ü—Ä—è–º—ã–µ –ø–æ–ª—è
                balance = data.get('balance') or data.get('total') or data.get('value')
                profit_loss = data.get('pnl') or data.get('profit_loss') or data.get('profit')
                
                # –í–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                if not balance and 'portfolio' in data:
                    portfolio = data['portfolio']
                    balance = portfolio.get('balance') or portfolio.get('total')
                    profit_loss = portfolio.get('pnl') or portfolio.get('profit_loss')
                
                # –ú–∞—Å—Å–∏–≤—ã –ø–æ–∑–∏—Ü–∏–π
                if not balance and 'positions' in data:
                    positions = data['positions']
                    if isinstance(positions, list):
                        total_value = sum(pos.get('value', 0) for pos in positions)
                        if total_value > 0:
                            balance = total_value
            
            if balance is not None:
                logger.debug(f"–ë–∞–ª–∞–Ω—Å –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ API {endpoint}: ${balance}")
                return {
                    'balance': float(balance),
                    'profit_loss': float(profit_loss) if profit_loss else 0.0,
                    'source': f'api_{endpoint.split("/")[-1]}'
                }
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ API –æ—Ç–≤–µ—Ç–∞: {e}")
            return None

    async def _fetch_balance_via_api(self) -> Optional[Dict[str, float]]:
        """Fallback –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ API –≤—ã–∑–æ–≤—ã"""
        try:
            logger.debug("üîÑ Fallback: –ø—Ä—è–º—ã–µ API –≤—ã–∑–æ–≤—ã")
            
            # –ü–æ–ª—É—á–∞–µ–º user ID –∏–ª–∏ address
            user_data = await self._get_user_data()
            if not user_data:
                return None
            
            user_id = user_data.get('id') or user_data.get('address')
            if not user_id:
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PolymarketClient –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            from src.polymarket_client import PolymarketClient
            client = PolymarketClient()
            
            api_balance = client.get_account_balance()
            if api_balance and api_balance > 0:
                return {
                    'balance': api_balance,
                    'profit_loss': 0.0,  # P&L —á–µ—Ä–µ–∑ API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
                    'source': 'polymarket_api'
                }
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API fallback: {e}")
            return None

    async def _get_user_data(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_endpoints = [
                'https://polymarket.com/api/user',
                'https://polymarket.com/api/auth/me',
                'https://polymarket.com/api/profile'
            ]
            
            for endpoint in user_endpoints:
                try:
                    response = self.session.get(endpoint, timeout=10)
                    if response.status_code == 200:
                        return response.json()
                except:
                    continue
                    
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user data: {e}")
            return None

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é"""
        if self.session:
            self.session.close()
            self.session = None
            logger.debug("WebScraper —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫—Ä–∞–ø–µ—Ä–∞
web_scraper = PolymarketWebScraper() 