"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è Polymarket
–í–∫–ª—é—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
"""

import asyncio
import time
from datetime import datetime, timedelta
from typing import Dict, Optional, Set, Tuple
from loguru import logger

from src.config.settings import config
from src.polymarket_client import PolymarketClient
from src.telegram_bot import telegram_notifier


class MarketFilter:
    """–§–∏–ª—å—Ç—Ä —Ä—ã–Ω–∫–æ–≤!"""
    def __init__(self):
        self.strategy_params = config.get_strategy_params()
        self.processed_markets: Set[str] = set()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤
        self.known_markets: Set[str] = set()
        self.new_markets_timestamps: Dict[str, datetime] = {}
        
        # –†—ã–Ω–∫–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ - –Ω–µ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        self.markets_with_positions: Set[str] = set()
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä —Ä—ã–Ω–∫–æ–≤ —Å –∫—ç—à–µ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤")

    def cleanup_old_markets(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ä—ã–Ω–∫–∏ –∏–∑ –∫—ç—à–∞ (–∫—Ä–æ–º–µ —Ä—ã–Ω–∫–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏)"""
        current_time = datetime.utcnow()
        expired_markets = []
        
        for market_id, discovery_time in self.new_markets_timestamps.items():
            # –ù–µ —É–¥–∞–ª—è–µ–º —Ä—ã–Ω–∫–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            if hasattr(self, 'markets_with_positions') and market_id in self.markets_with_positions:
                logger.debug(f"üîí –†—ã–Ω–æ–∫ {market_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à–µ (–µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)")
                continue
                
            time_diff = current_time - discovery_time
            if time_diff.total_seconds() > (config.trading.TIME_WINDOW_MINUTES * 60):
                expired_markets.append(market_id)
        
        for market_id in expired_markets:
            del self.new_markets_timestamps[market_id]
            
        if expired_markets:
            logger.debug(f"üßπ –û—á–∏—â–µ–Ω—ã {len(expired_markets)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ä—ã–Ω–∫–æ–≤ –∏–∑ –∫—ç—à–∞")

    def is_binary_market(self, market_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ä—ã–Ω–æ–∫ –±–∏–Ω–∞—Ä–Ω—ã–π (2 –∏—Å—Ö–æ–¥–∞)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º tokens (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        tokens = market_data.get("tokens", [])
        if tokens:
            token_count = len(tokens)
            logger.info(f"      üîç –ë–∏–Ω–∞—Ä–Ω–æ—Å—Ç—å (tokens): {token_count} —Ç–æ–∫–µ–Ω–æ–≤")
            if token_count != 2:
                logger.info(f"      ‚ùå –ù–µ –±–∏–Ω–∞—Ä–Ω—ã–π: {token_count} —Ç–æ–∫–µ–Ω–æ–≤ (–Ω—É–∂–Ω–æ 2)")
                return False
            logger.info(f"      ‚úÖ –ë–∏–Ω–∞—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫: {token_count} —Ç–æ–∫–µ–Ω–æ–≤")
            return True
        
        # Fallback –Ω–∞ outcomes (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
        outcomes = market_data.get("outcomes", [])
        outcome_count = len(outcomes)
        logger.info(f"      üîç –ë–∏–Ω–∞—Ä–Ω–æ—Å—Ç—å (outcomes): {outcome_count} –∏—Å—Ö–æ–¥–æ–≤")
        if outcome_count != 2:
            logger.info(f"      ‚ùå –ù–µ –±–∏–Ω–∞—Ä–Ω—ã–π: {outcome_count} –∏—Å—Ö–æ–¥–æ–≤ (–Ω—É–∂–Ω–æ 2)")
            return False
        logger.info(f"      ‚úÖ –ë–∏–Ω–∞—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫: {outcome_count} –∏—Å—Ö–æ–¥–æ–≤")
        return True

    def check_liquidity_requirement(self, market_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        # Polymarket /markets API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç liquidity
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä—ã–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞
        is_active = market_data.get("active", False)
        accepts_orders = market_data.get("accepting_orders", False)
        is_closed = market_data.get("closed", True)
        
        logger.info(f"      üîç –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: active={is_active}, accepts_orders={accepts_orders}, closed={is_closed}")
        
        # –†—ã–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Ä–¥–µ—Ä–∞ –∏ –Ω–µ –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–º
        if is_active and accepts_orders and not is_closed:
            logger.info(f"      ‚úÖ –†—ã–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞")
            return True
        else:
            logger.info(f"      ‚ùå –†—ã–Ω–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: active={is_active}, accepts_orders={accepts_orders}, closed={is_closed}")
            return False

    def check_time_window(self, market_data: Dict) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ä—ã–Ω–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä—ã–Ω–∫–∞
        market_id = market_data.get("question_id") or market_data.get("condition_id") or market_data.get("market_slug")
        if not market_id:
            return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Ä—ã–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"
        
        # –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ - –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
        if hasattr(self, 'markets_with_positions') and market_id in self.markets_with_positions:
            logger.info(f"      ‚úÖ –†—ã–Ω–æ–∫ {market_id} –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–∑–∏—Ü–∏—é - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏")
            return True, "–†—ã–Ω–æ–∫ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not hasattr(self, 'known_markets'):
            self.known_markets = set()
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫—ç—à —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö")
        
        # –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if market_id in self.known_markets:
            logger.info(f"      ‚ùå –†—ã–Ω–æ–∫ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ")
            return False, "–†—ã–Ω–æ–∫ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ"
        
        # –ù–æ–≤—ã–π —Ä—ã–Ω–æ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
        self.known_markets.add(market_id)
        
        market_question = market_data.get('question', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫')[:50]
        logger.info(f"      üÜï –ù–û–í–´–ô –†–´–ù–û–ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {market_question}...")
        logger.info(f"      üÜî ID: {market_id}")
        logger.info(f"      ‚è∞ –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {datetime.utcnow().strftime('%H:%M:%S')}")
        
        return True, "–ù–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"

    def should_trade_market(self, market_data: Dict) -> Tuple[bool, str]:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä—ã–Ω–∫–∞ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        market_id = market_data.get("question_id") or market_data.get("condition_id") or market_data.get("market_slug")
        if not market_id:
            return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Ä—ã–Ω–∫–∞"

        if market_id in self.processed_markets:
            return False, "–†—ã–Ω–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–Ω–∞—Ä–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
        if not self.is_binary_market(market_data):
            return False, "–ù–µ –±–∏–Ω–∞—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        if not self.check_liquidity_requirement(market_data):
            return False, "–†—ã–Ω–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
        time_check_result, time_reason = self.check_time_window(market_data)
        if not time_check_result:
            return False, time_reason

        self.processed_markets.add(market_id)
        return True, "–†—ã–Ω–æ–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"


class TradingEngine:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫"""
    def __init__(self):
        self.client = PolymarketClient()
        self.market_filter = MarketFilter()
        self.is_running = False
        self.stats = {"total_trades": 0, "successful_trades": 0, "total_profit": 0.0}

        # –¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.is_trading_enabled = True
        
        if self.client.get_address():
            logger.info(f"–¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {self.client.get_address()}")
        else:
            logger.warning("PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–æ—Ä–≥–æ–≤–ª—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞.")
            self.is_trading_enabled = False

    async def start(self):
        logger.info("–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
        self.is_running = True
        telegram_notifier.set_trading_engine(self)

        tasks = [
            asyncio.create_task(self._market_monitor_task()),
        ]
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞
        if self.is_trading_enabled:
            tasks.append(asyncio.create_task(self._position_monitor_task()))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á
        await telegram_notifier.start_bot()

        await asyncio.gather(*tasks, return_exceptions=True)

    async def stop(self):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
        self.is_running = False
        self.client.stop_websocket()
        await telegram_notifier.stop_bot()

    async def _market_monitor_task(self):
        logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–æ–≤...")
        while self.is_running:
            try:
                # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ä—ã–Ω–∫–∏ –∏–∑ –∫—ç—à–∞
                self.market_filter.cleanup_old_markets()
                
                logger.info("üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤...")
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç)
                markets = self.client.get_new_markets(max_age_minutes=10)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫
                if not isinstance(markets, list):
                    logger.warning(f"get_new_markets() –≤–µ—Ä–Ω—É–ª –Ω–µ —Å–ø–∏—Å–æ–∫: {type(markets)}")
                    await asyncio.sleep(60)
                    continue
                
                if not markets:
                    logger.info("üìä –ù–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤—Å–µ —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç)")
                    await asyncio.sleep(60)
                    continue
                
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(markets)} –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                new_markets_found = 0
                suitable_markets = 0
                
                for i, market in enumerate(markets, 1):
                    # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π API
                    market_id = market.get("question_id") or market.get("condition_id") or market.get("market_slug")
                    market_question = market.get("question", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫")
                    
                    logger.info(f"üîç –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê #{i}/{len(markets)}")
                    logger.info(f"   üìã –í–æ–ø—Ä–æ—Å: {market_question}")
                    logger.info(f"   üÜî ID: {market_id}")
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–µ
                    logger.info(f"   üìä –î–ê–ù–ù–´–ï –†–´–ù–ö–ê:")
                    logger.info(f"      üéÆ –ê–∫—Ç–∏–≤–µ–Ω: {market.get('active', False)}")
                    logger.info(f"      üí± –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞: {market.get('accepting_orders', False)}")
                    logger.info(f"      üîí –ó–∞–∫—Ä—ã—Ç: {market.get('closed', False)}")
                    logger.info(f"      üìÖ –°–æ–∑–¥–∞–Ω: {market.get('created_at', 'N/A')}")
                    logger.info(f"      ‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {market.get('end_date_iso', 'N/A')}")
                    logger.info(f"      üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {market.get('min_liquidity', 'N/A')}")
                    logger.info(f"      üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {market.get('category', 'N/A')}")
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
                    tokens = market.get('tokens', [])
                    if tokens:
                        logger.info(f"   üéØ –¢–û–ö–ï–ù–´ ({len(tokens)}):")
                        for j, token in enumerate(tokens, 1):
                            if isinstance(token, dict):
                                logger.info(f"      #{j} ID: {token.get('id', 'N/A')}")
                                logger.info(f"         –ù–∞–∑–≤–∞–Ω–∏–µ: {token.get('name', 'N/A')}")
                                logger.info(f"         –ò—Å—Ö–æ–¥: {token.get('outcome', 'N/A')}")
                                logger.info(f"         –¶–µ–Ω–∞: {token.get('price', 'N/A')}")
                                logger.info(f"         –û–±—ä–µ–º: {token.get('volume', 'N/A')}")
                                logger.info(f"         –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {token.get('liquidity', 'N/A')}")
                    else:
                        logger.info(f"   ‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏
                    should_trade, reason = self.market_filter.should_trade_market(market)
                    
                    if should_trade:
                        suitable_markets += 1
                        logger.info(f"   ‚úÖ –ü–û–î–•–û–î–Ø–©–ò–ô –†–´–ù–û–ö!")
                        logger.info(f"   üéØ –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                        
                        if not self.is_trading_enabled:
                            logger.warning(f"   ‚ö†Ô∏è  –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–Ω–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞)")
                            await telegram_notifier.send_new_market_notification(market)
                            continue
                            
                        logger.info(f"   üöÄ –ü–æ–ø—ã—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
                        await self._attempt_trade(market)
                        
                        new_markets_found += 1
                    else:
                        logger.info(f"   ‚ùå –ù–ï –ü–û–î–•–û–î–ò–¢: {reason}")
                    
                    logger.info(f"   {'='*50}")
                
                # –°–≤–æ–¥–∫–∞ –ø–æ —Ü–∏–∫–ª—É
                if new_markets_found > 0:
                    logger.info(f"üéØ –ò–¢–û–ì –ü–û–ò–°–ö–ê: –Ω–∞–π–¥–µ–Ω–æ {suitable_markets} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä—ã–Ω–∫–æ–≤ –∏–∑ {len(markets)}")
                    await telegram_notifier.send_search_summary(len(markets), suitable_markets, new_markets_found)
                else:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(markets)} —Ä—ã–Ω–∫–æ–≤, –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ä—ã–Ω–∫–æ–≤: {e}")
                await asyncio.sleep(60)

    async def _attempt_trade(self, market_data: Dict):
        if not self.is_trading_enabled: return

        token_id = self._get_target_token_id(market_data)
        if not token_id: return

        price = self.client.get_current_price(token_id)
        if not price: return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ NO
        if config.trading.POSITION_SIDE == "NO" and price > config.trading.MAX_NO_PRICE:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä—ã–Ω–æ–∫: —Ü–µ–Ω–∞ NO {price:.4f} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º {config.trading.MAX_NO_PRICE}")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size_usd = config.trading.POSITION_SIZE_USD

        side = "BUY"
        size = position_size_usd / price

        order_result = await self.client.place_order(token_id, side, size, price, market_data)
        if order_result:
            self.stats["total_trades"] += 1
            logger.info(f"–°–¥–µ–ª–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞: {order_result}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ 
            # —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∏—Å–∫–ª—é—á–∞–ª—Å—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
            market_id = market_data.get("question_id") or market_data.get("condition_id") or market_data.get("market_slug")
            if market_id:
                self.market_filter.markets_with_positions.add(market_id)
                logger.info(f"üìå –†—ã–Ω–æ–∫ {market_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏")
        else:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä—ã–Ω–∫–∞: {market_data.get('question', 'N/A')}")

    def _get_target_token_id(self, market_data: Dict) -> Optional[str]:
        for token in market_data.get("tokens", []):
            if config.trading.POSITION_SIDE == "YES" and "YES" in token.get("name", ""):
                return token.get("id")
            if config.trading.POSITION_SIDE == "NO" and "NO" in token.get("name", ""):
                return token.get("id")
        return None

    async def _position_monitor_task(self):
        logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π...")
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
                await self.client.check_and_close_positions()
                
                # –û—á–∏—â–∞–µ–º —Ä—ã–Ω–∫–∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                await self._cleanup_markets_without_positions()
                
                await asyncio.sleep(config.trading.POSITION_MONITOR_INTERVAL_SECONDS)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
                await asyncio.sleep(60)

    async def _cleanup_markets_without_positions(self):
        """–£–¥–∞–ª—è–µ—Ç —Ä—ã–Ω–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –µ—Å–ª–∏ –¥–ª—è –Ω–∏—Ö –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            if not hasattr(self.market_filter, 'markets_with_positions'):
                return
                
            markets_to_remove = []
            open_positions = await self.client.db_manager.get_open_positions()
            user_address = self.client.get_address()
            
            if not user_address:
                return
                
            user_positions = [p for p in open_positions if p.get('user_address') == user_address]
            active_market_ids = set(p.get('market_id') for p in user_positions if p.get('market_id'))
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä—ã–Ω–∫–∏ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –Ω–æ –±–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            for market_id in self.market_filter.markets_with_positions:
                if market_id not in active_market_ids:
                    markets_to_remove.append(market_id)
            
            # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∏–µ —Ä—ã–Ω–∫–∏
            for market_id in markets_to_remove:
                self.market_filter.markets_with_positions.discard(market_id)
                logger.info(f"üßπ –†—ã–Ω–æ–∫ {market_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π)")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä—ã–Ω–∫–æ–≤ –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π: {e}")



    async def get_stats(self) -> Dict:
        open_positions_count = 0
        user_address = self.client.get_address()
        if user_address:
            # get_open_positions –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            all_open_positions = await self.client.db_manager.get_open_positions()
            user_open_positions = [p for p in all_open_positions if p.get('user_address') == user_address]
            open_positions_count = len(user_open_positions)

        return {**self.stats, "open_positions": open_positions_count}

    def enable_trading(self):
        if not self.client.get_address():
            logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é: PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return
        self.is_trading_enabled = True

    def disable_trading(self):
        self.is_trading_enabled = False
