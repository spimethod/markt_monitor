"""Telegram bot module."""

import asyncio
import itertools
import logging
import pathlib
from datetime import datetime
from typing import Any, Dict, List, Optional, Union

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)
from telegram import CallbackQuery

from src.config.settings import config

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ª–æ–≥–æ–≤
LOG_PATHS = [
    pathlib.Path("logs/bot.log"),
    pathlib.Path("/app/logs/bot.log"),  # Railway
    pathlib.Path("./logs/bot.log"),
    pathlib.Path("../logs/bot.log"),
]
TAIL_LINES = 30  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
MAX_MESSAGE_LENGTH = 4000  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram


def find_log_file() -> pathlib.Path:
    """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ —Å—Ä–µ–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π"""
    for log_path in LOG_PATHS:
        if log_path.exists():
            return log_path
    return LOG_PATHS[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—É—Ç—å –∫–∞–∫ fallback

def tail_log(path: pathlib.Path, n: int) -> str:
    """–ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ n —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞"""
    try:
        if not path.exists():
            return "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        with path.open("r", encoding="utf-8") as f:
            lines = f.readlines()
            if not lines:
            return "–õ–æ–≥ –ø—É—Å—Ç"
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ n —Å—Ç—Ä–æ–∫
            last_lines = lines[-n:] if len(lines) > n else lines
        return "".join(last_lines)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}"


def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram"""
    return (text
            .replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;")
            .replace('"', "&quot;")
            .replace("'", "&#39;"))


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""

    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.app: Optional[Application] = None
        self.bot_status = "initialized"
        self.trading_engine: Optional[Any] = None
        self.trading_enabled = True
        self._initialize_bot()

    def set_trading_engine(self, trading_engine: Any):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç—É—Å—É"""
        self.trading_engine = trading_engine

    def _initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        try:
            self.app = Application.builder().token(self.bot_token).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.app.add_handler(CommandHandler("start", self._cmd_start))
            self.app.add_handler(CommandHandler("status", self._cmd_status))
            self.app.add_handler(CommandHandler("positions", self._cmd_positions))
            self.app.add_handler(CommandHandler("stop", self._cmd_stop_trading))
            self.app.add_handler(CommandHandler("start_trading", self._cmd_start_trading))
            self.app.add_handler(CommandHandler("config", self._cmd_config))
            self.app.add_handler(CommandHandler("logs", self._cmd_logs))
            self.app.add_handler(CommandHandler("help", self._cmd_help))
            
            # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            self.app.add_handler(CommandHandler("orders", self._cmd_orders))
            self.app.add_handler(CommandHandler("cancel", self._cmd_cancel_order))
            self.app.add_handler(CommandHandler("trade", self._cmd_trade))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
            self.app.add_handler(CallbackQueryHandler(self._handle_callback))

            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            raise

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            if self.app:
                await self.app.initialize()
                await self.app.start()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
                await self.send_startup_notification()

                self.bot_status = "running"
                logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            raise

    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞"""
        try:
            if self.app:
                await self.app.stop()

            self.bot_status = "stopped"
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞: {e}")

    async def send_message(self, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            if self.app:
                await self.app.bot.send_message(
                    chat_id=self.chat_id,
                    text=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup,
                )
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {text[:50]}...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

    # ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====

    async def send_startup_notification(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        text = f"""
üöÄ <b>Polymarket Trading Bot –∑–∞–ø—É—â–µ–Ω</b>

üìä <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${config.trading.POSITION_SIZE_USD}
‚Ä¢ –¶–µ–ª—å –ø—Ä–∏–±—ã–ª–∏: {config.trading.PROFIT_TARGET_PERCENT}%
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {config.trading.TRADING_STRATEGY}
‚Ä¢ –°—Ç–æ—Ä–æ–Ω–∞: {config.trading.POSITION_SIDE}
‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {config.trading.MAX_OPEN_POSITIONS}

‚è∞ <i>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("üìã –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="config")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

            await self.send_message(text, reply_markup=reply_markup)

    async def send_new_market_notification(self, market_data: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä—ã–Ω–∫–µ"""
        if not config.telegram.NOTIFY_NEW_MARKETS:
            return

        text = f"""
üÜï <b>–ù–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {market_data.get('question', 'N/A')}
üè∑Ô∏è <b>ID:</b> <code>{market_data.get('id', 'N/A')}</code>
üí∞ <b>–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:</b> ${market_data.get('liquidity', 0):.2f}
üìä <b>–û–±—ä–µ–º 24—á:</b> ${market_data.get('volume24hr', 0):.2f}

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        await self.send_message(text)

    async def send_trade_notification(self, trade_data: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ"""
        if not config.telegram.NOTIFY_TRADES:
            return

        action = "üü¢ –ü–û–ö–£–ü–ö–ê" if trade_data.get("side") == "BUY" else "üî¥ –ü–†–û–î–ê–ñ–ê"

        text = f"""
{action} <b>–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω</b>

üè∑Ô∏è <b>ID:</b> <code>{trade_data.get('order_id', 'N/A')}</code>
üí± <b>–¢–æ–∫–µ–Ω:</b> <code>{trade_data.get('token_id', 'N/A')[:20]}...</code>
üìä <b>–†–∞–∑–º–µ—Ä:</b> {trade_data.get('size', 0):.2f}
üí∞ <b>–¶–µ–Ω–∞:</b> ${trade_data.get('price', 0):.4f}
üíµ <b>–°—É–º–º–∞:</b> ${trade_data.get('size', 0) * trade_data.get('price', 0):.2f}

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        await self.send_message(text)

    async def send_profit_notification(self, profit_data: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã–ª–∏"""
        if not config.telegram.NOTIFY_PROFITS:
            return

        profit_percent = profit_data.get("profit_percent", 0)
        profit_emoji = "üíö" if profit_percent > 0 else "‚ù§Ô∏è"

        text = f"""
{profit_emoji} <b>–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞</b>

üè∑Ô∏è <b>ID:</b> <code>{profit_data.get('order_id', 'N/A')}</code>
üìä <b>–ü—Ä–∏–±—ã–ª—å:</b> {profit_percent:.2f}%
üí∞ <b>–°—É–º–º–∞ P&L:</b> ${profit_data.get('pnl_amount', 0):.2f}
üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {profit_data.get('reason', 'N/A')}

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("üìã –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

            await self.send_message(text, reply_markup=reply_markup)

    async def send_error_notification(self, error_msg: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if not config.telegram.NOTIFY_ERRORS:
            return

        text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {error_msg}

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("üìã –õ–æ–≥–∏", callback_data="logs")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

            await self.send_message(text, reply_markup=reply_markup)

    async def send_websocket_fallback_notification(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ HTTP polling"""
        text = f"""
‚ö†Ô∏è <b>WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>

üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ HTTP polling
üìä –ó–∞–¥–µ—Ä–∂–∫–∞: –¥–æ 60 —Å–µ–∫—É–Ω–¥
üîß –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        await self.send_message(text)

    async def send_search_summary(self, total_markets: int, suitable_markets: int, new_markets: int):
        """–°–≤–æ–¥–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä—ã–Ω–∫–æ–≤"""
        text = f"""
üîç <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_markets} —Ä—ã–Ω–∫–æ–≤
‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö: {suitable_markets}
üÜï –ù–æ–≤—ã—Ö: {new_markets}

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        await self.send_message(text)

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

    async def _get_current_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.trading_engine:
            return {
                "is_trading_enabled": self.trading_engine.is_trading_enabled,
                "total_trades": self.trading_engine.stats.get("total_trades", 0),
                "successful_trades": self.trading_engine.stats.get("successful_trades", 0),
                "total_profit": self.trading_engine.stats.get("total_profit", 0.0),
                "open_positions": len(self._get_open_positions()),
                "daily_trades": self.trading_engine.stats.get("daily_trades", 0),
            }
            return {
            "is_trading_enabled": False,
            "total_trades": 0,
            "successful_trades": 0,
            "total_profit": 0.0,
            "open_positions": 0,
            "daily_trades": 0,
        }

    def _get_open_positions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if self.trading_engine and hasattr(self.trading_engine, "client"):
            return [
                p
                for p in self.trading_engine.client.active_positions.values()
                if p["status"] == "open"
            ]
            return []

    def _format_timestamp(self, timestamp: Union[datetime, str, None]) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timestamp"""
        if isinstance(timestamp, datetime):
            return timestamp.strftime("%Y-%m-%d %H:%M")
        if isinstance(timestamp, str):
            try:
                dt = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
            return dt.strftime("%Y-%m-%d %H:%M")
            except (ValueError, AttributeError):
            return timestamp[:16] if len(timestamp) > 16 else timestamp
            return "N/A"

    def _get_logs_content(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–æ–≥–æ–≤"""
        try:
            log_path = find_log_file()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not log_path.exists():
            return f"–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_path.absolute()}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = log_path.stat().st_size
            if file_size == 0:
            return "–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç"
            
            content = tail_log(log_path, TAIL_LINES)
            if not content or content.strip() == "":
            return f"–õ–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç"
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            escaped_content = escape_html(content)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(escaped_content) > MAX_MESSAGE_LENGTH:
                escaped_content = escaped_content[-MAX_MESSAGE_LENGTH:] + "\n\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
            
            return escaped_content
        except Exception as e:
            log_path = find_log_file()
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}\n–ü—É—Ç—å: {log_path.absolute()}"

    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====

    async def _cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if not update.message:
            return

        text = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Polymarket Trading Bot!</b>

ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ—Ä–≥—É–µ—Ç –Ω–∞ Polymarket, –ø–æ–∫—É–ø–∞—è –ø–æ–∑–∏—Ü–∏–∏ NO –Ω–∞ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö.

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/positions - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/start_trading - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏

üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
        """

        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("üìã –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="config")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        if not update.message:
            return

        stats = await self._get_current_stats()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_status_text = ""
        try:
            if self.trading_engine and hasattr(self.trading_engine, "client") and hasattr(self.trading_engine.client, "db_manager"):
                db_status = self.trading_engine.client.db_manager.get_database_status()
                db_emoji = "üóÑÔ∏è" if db_status["engine_type"] == "PostgreSQL" else "üìÅ" if db_status["engine_type"] == "SQLite" else "‚ùå"
                db_status_text = f"\n{db_emoji} <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {db_status['engine_type']}"
                if db_status.get("using_sqlite_fallback"):
                    db_status_text += " (fallback)"
        except Exception as db_e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ë–î: {db_e}")
            db_status_text = "\n‚ùì <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

ü§ñ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {self.bot_status}
üîÑ <b>–¢–æ—Ä–≥–æ–≤–ª—è:</b> {'–í–∫–ª—é—á–µ–Ω–∞' if stats.get('is_trading_enabled', False) else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
üìà <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> {stats.get('open_positions', 0)}{db_status_text}

üìã <b>–°–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –°–¥–µ–ª–æ–∫: {stats.get('daily_trades', 0)}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${stats.get('total_profit', 0):.2f}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_trades', 0)}/{stats.get('total_trades', 0)}

‚è∞ <i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
            [InlineKeyboardButton("üìã –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _cmd_positions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /positions"""
        if not update.message:
            return

        open_positions = self._get_open_positions()

        if not open_positions:
            text = f"üìã <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç</b>\n\n‚è∞ <i>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.utcnow().strftime('%H:%M:%S')}</i>"
        keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="positions")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            ]
        reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
            )
            return

        text = f"üìã <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b> ({len(open_positions)})\n\n"

        for pos in open_positions:
            created_at = self._format_timestamp(pos.get("created_at"))
            pnl = pos.get("pnl", 0.0)
            pnl_emoji = "üìà" if pnl > 0 else "üìâ" if pnl < 0 else "üìä"

            text += f"""
üè∑Ô∏è <b>ID:</b> <code>{pos.get('id', 'N/A')[:10]}...</code>
üí± <b>–¢–æ–∫–µ–Ω:</b> <code>{pos.get('token_id', 'N/A')[:10]}...</code>
üìä <b>–†–∞–∑–º–µ—Ä:</b> {pos.get('size', 0):.2f}
üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> ${pos.get('entry_price', 0):.4f}
{pnl_emoji} <b>PnL:</b> ${pnl:.2f} ({(pnl / (pos.get('size', 1) * pos.get('entry_price', 1)) * 100):.1f}%)
üïí <b>–û—Ç–∫—Ä—ã—Ç–∞:</b> {created_at}
            """
            text += "\n" + "-" * 20 + "\n"

        text += f"\n‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>"

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="positions")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _cmd_stop_trading(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stop"""
        if not update.message:
            return

        if self.trading_engine:
            self.trading_engine.disable_trading()

        self.trading_enabled = False

        text = f"""
‚èπÔ∏è <b>–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>

üö´ –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏
üîÑ –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_trading

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="start_trading")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _cmd_start_trading(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start_trading"""
        if not update.message:
            return

        if self.trading_engine:
            self.trading_engine.enable_trading()

        self.trading_enabled = True

        text = f"""
‚ñ∂Ô∏è <b>–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞</b>

‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ —Ä—ã–Ω–∫–∏
üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∞–∫—Ç–∏–≤–Ω–æ
üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="stop")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _cmd_config(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /config"""
        if not update.message:
            return

        text = f"""
‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞</b>

üí∞ <b>–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${config.trading.POSITION_SIZE_USD}
‚Ä¢ –¶–µ–ª—å –ø—Ä–∏–±—ã–ª–∏: {config.trading.PROFIT_TARGET_PERCENT}%
‚Ä¢ Stop-loss: {config.trading.STOP_LOSS_PERCENT}%
‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {config.trading.MAX_OPEN_POSITIONS}
‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è: {config.trading.MAX_POSITION_HOURS}—á

üìä <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b>
‚Ä¢ –†–µ–∂–∏–º: {config.trading.TRADING_STRATEGY}
‚Ä¢ –°—Ç–æ—Ä–æ–Ω–∞: {config.trading.POSITION_SIDE}
‚Ä¢ –ú–∏–Ω. –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${config.trading.MIN_LIQUIDITY_USD}

üîÑ <b>API:</b>
‚Ä¢ –†–æ—Ç–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if config.trading.API_ROTATION_ENABLED else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {config.trading.REQUEST_DELAY_SECONDS}—Å

üí¨ <i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway</i>
        """

            await update.message.reply_text(text, parse_mode=ParseMode.HTML)

    async def _cmd_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /logs"""
        if not update.message:
            return

        try:
            logger.info("–ö–æ–º–∞–Ω–¥–∞ /logs –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            content = self._get_logs_content()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–æ–≤ –¥–ª–∏–Ω–æ–π: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        text = f"""
üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {TAIL_LINES} —Å—Ç—Ä–æ–∫ –∂—É—Ä–Ω–∞–ª–∞</b>

<code>{content}</code>

‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
            """

        keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="logs")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            ]
        reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
            logger.info("–ö–æ–º–∞–Ω–¥–∞ /logs —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /logs: {e}")
            error_text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {str(e)}

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """
            await update.message.reply_text(error_text, parse_mode=ParseMode.HTML)

    async def _cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        if not update.message:
            return

        text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/positions - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/start_trading - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìà <b>–¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/orders - –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
/cancel [order_id] - –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä
/trade [market_id] [side] [size] [price] - –†—É—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è

üí° <i>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ inline-–∫–Ω–æ–ø–∫–∏</i>
        """

            await update.message.reply_text(text, parse_mode=ParseMode.HTML)

    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK =====

    async def _handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        if not query:
            return

        await query.answer()

        if query.data == "status":
            await self._handle_status_callback(query)
        elif query.data == "positions":
            await self._handle_positions_callback(query)
        elif query.data == "config":
            await self._handle_config_callback(query)
        elif query.data == "stop":
            await self._handle_stop_callback(query)
        elif query.data == "start_trading":
            await self._handle_start_trading_callback(query)
        elif query.data == "logs":
            await self._handle_logs_callback(query)

    async def _handle_status_callback(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        stats = await self._get_current_stats()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_status_text = ""
            try:
                if self.trading_engine and hasattr(self.trading_engine, "client") and hasattr(self.trading_engine.client, "db_manager"):
                    db_status = self.trading_engine.client.db_manager.get_database_status()
                    db_emoji = "üóÑÔ∏è" if db_status["engine_type"] == "PostgreSQL" else "üìÅ" if db_status["engine_type"] == "SQLite" else "‚ùå"
                    db_status_text = f"\n{db_emoji} <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {db_status['engine_type']}"
                    if db_status.get("using_sqlite_fallback"):
                        db_status_text += " (fallback)"
            except Exception as db_e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ë–î: {db_e}")
                db_status_text = "\n‚ùì <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

ü§ñ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {self.bot_status}
üîÑ <b>–¢–æ—Ä–≥–æ–≤–ª—è:</b> {'–í–∫–ª—é—á–µ–Ω–∞' if stats.get('is_trading_enabled', False) else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
üìà <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> {stats.get('open_positions', 0)}{db_status_text}

üìã <b>–°–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –°–¥–µ–ª–æ–∫: {stats.get('daily_trades', 0)}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${stats.get('total_profit', 0):.2f}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_trades', 0)}/{stats.get('total_trades', 0)}

‚è∞ <i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
            """

        keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
                [InlineKeyboardButton("üìã –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
            ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
                text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
            )

    async def _handle_positions_callback(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–æ–∑–∏—Ü–∏–π"""
        open_positions = self._get_open_positions()

        if not open_positions:
            text = f"üìã <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç</b>\n\n‚è∞ <i>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.utcnow().strftime('%H:%M:%S')}</i>"
        keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="positions")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
                text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
            )
            return

        text = f"üìã <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b> ({len(open_positions)})\n\n"

        for pos in open_positions:
            created_at = self._format_timestamp(pos.get("created_at"))
            pnl = pos.get("pnl", 0.0)
            pnl_emoji = "üìà" if pnl > 0 else "üìâ" if pnl < 0 else "üìä"

            text += f"""
üè∑Ô∏è <b>ID:</b> <code>{pos.get('id', 'N/A')[:10]}...</code>
üí± <b>–¢–æ–∫–µ–Ω:</b> <code>{pos.get('token_id', 'N/A')[:10]}...</code>
üìä <b>–†–∞–∑–º–µ—Ä:</b> {pos.get('size', 0):.2f}
üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> ${pos.get('entry_price', 0):.4f}
{pnl_emoji} <b>PnL:</b> ${pnl:.2f} ({(pnl / (pos.get('size', 1) * pos.get('entry_price', 1)) * 100):.1f}%)
üïí <b>–û—Ç–∫—Ä—ã—Ç–∞:</b> {created_at}
            """
            text += "\n" + "-" * 20 + "\n"

        text += f"\n‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>"

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="positions")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _handle_config_callback(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        text = f"""
‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞</b>

üí∞ <b>–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${config.trading.POSITION_SIZE_USD}
‚Ä¢ –¶–µ–ª—å –ø—Ä–∏–±—ã–ª–∏: {config.trading.PROFIT_TARGET_PERCENT}%
‚Ä¢ Stop-loss: {config.trading.STOP_LOSS_PERCENT}%
‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {config.trading.MAX_OPEN_POSITIONS}
‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è: {config.trading.MAX_POSITION_HOURS}—á

üìä <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b>
‚Ä¢ –†–µ–∂–∏–º: {config.trading.TRADING_STRATEGY}
‚Ä¢ –°—Ç–æ—Ä–æ–Ω–∞: {config.trading.POSITION_SIDE}
‚Ä¢ –ú–∏–Ω. –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${config.trading.MIN_LIQUIDITY_USD}

üîÑ <b>API:</b>
‚Ä¢ –†–æ—Ç–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if config.trading.API_ROTATION_ENABLED else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {config.trading.REQUEST_DELAY_SECONDS}—Å

üí¨ <i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway</i>
        """

        await query.edit_message_text(text, parse_mode=ParseMode.HTML)

    async def _handle_stop_callback(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.trading_engine:
            self.trading_engine.disable_trading()

        self.trading_enabled = False

        text = f"""
‚èπÔ∏è <b>–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>

üö´ –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏
üîÑ –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_trading

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="start_trading")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _handle_start_trading_callback(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.trading_engine:
            self.trading_engine.enable_trading()

        self.trading_enabled = True

        text = f"""
‚ñ∂Ô∏è <b>–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞</b>

‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ —Ä—ã–Ω–∫–∏
üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∞–∫—Ç–∏–≤–Ω–æ
üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="stop")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _handle_logs_callback(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ª–æ–≥–æ–≤"""
        try:
            logger.info("Callback /logs –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            content = self._get_logs_content()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–æ–≤ –¥–ª–∏–Ω–æ–π: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        text = f"""
üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {TAIL_LINES} —Å—Ç—Ä–æ–∫ –∂—É—Ä–Ω–∞–ª–∞</b>

<code>{content}</code>

‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
            """

        keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="logs")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
            logger.info("Callback /logs —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback /logs: {e}")
            error_text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {str(e)}

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
            """
        await query.edit_message_text(error_text, parse_mode=ParseMode.HTML)

    async def _cmd_orders(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞"""
        if not update.message:
            return
            
        try:
            if not self.trading_engine or not self.trading_engine.client:
                await update.message.reply_text("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

            orders = await self.trading_engine.client.get_my_orders()
            
            if not orders:
                await update.message.reply_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            return

            text = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ ({len(orders)}):</b>\n\n"
            
            for i, order in enumerate(orders[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                side_emoji = "üü¢" if order.get("side") == "BUY" else "üî¥"
                text += f"{i}. {side_emoji} <b>{order.get('side', 'N/A')}</b>\n"
                text += f"   üè∑Ô∏è ID: <code>{order.get('order_id', 'N/A')}</code>\n"
                text += f"   üí± –¢–æ–∫–µ–Ω: <code>{order.get('asset_id', 'N/A')[:20]}...</code>\n"
                text += f"   üìä –†–∞–∑–º–µ—Ä: {order.get('size', 0):.2f}\n"
                text += f"   üí∞ –¶–µ–Ω–∞: ${order.get('price', 0):.4f}\n"
                text += f"   üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {self._format_timestamp(order.get('expires'))}\n\n"

            await update.message.reply_text(text, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}")

    async def _cmd_cancel_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel [order_id] - –æ—Ç–º–µ–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä"""
        if not update.message:
            return
            
        try:
            if not context.args or len(context.args) == 0:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ—Ä–¥–µ—Ä–∞: /cancel [order_id]")
            return

            order_id = context.args[0]
            
            if not self.trading_engine or not self.trading_engine.client:
                await update.message.reply_text("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

            success = await self.trading_engine.client.cancel_order(order_id)
            
            if success:
                await update.message.reply_text(f"‚úÖ –û—Ä–¥–µ—Ä {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
            else:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä {order_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {str(e)}")

    async def _cmd_trade(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /trade [market_id] [side] [size] [price] - —Ä—É—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"""
        if not update.message:
            return
            
        try:
            if not context.args or len(context.args) < 4:
                await update.message.reply_text(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: /trade [market_id] [side] [size] [price]\n"
                    "–ü—Ä–∏–º–µ—Ä: /trade 123 BUY 100 0.5"
                )
            return

            market_id, side, size_str, price_str = context.args[:4]
            
            try:
                size = float(size_str)
                price = float(price_str)
            except ValueError:
                await update.message.reply_text("‚ùå –†–∞–∑–º–µ—Ä –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
            return

            if side.upper() not in ["BUY", "SELL"]:
                await update.message.reply_text("‚ùå –°—Ç–æ—Ä–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å BUY –∏–ª–∏ SELL")
            return

            if not self.trading_engine or not self.trading_engine.client:
                await update.message.reply_text("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
            markets = self.trading_engine.client.get_markets()
            market_data = None
            
            for market in markets:
                if (market.get("question_id") == market_id or 
                    market.get("condition_id") == market_id or 
                    market.get("market_slug") == market_id):
                    market_data = market
                    break

            if not market_data:
                await update.message.reply_text(f"‚ùå –†—ã–Ω–æ–∫ {market_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

            # –ü–æ–ª—É—á–∞–µ–º token_id –¥–ª—è –Ω—É–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
            token_id = None
            for token in market_data.get("tokens", []):
                if side.upper() == "BUY" and "YES" in token.get("outcome", ""):
                    token_id = token.get("token_id")
                    break
                elif side.upper() == "SELL" and "NO" in token.get("outcome", ""):
                    token_id = token.get("token_id")
                    break

            if not token_id:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –¥–ª—è {side}")
            return

            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            order_result = await self.trading_engine.client.place_order(
                token_id, side.upper(), size, price, market_data
            )

            if order_result:
                await update.message.reply_text(
                    f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω!\n"
                    f"üè∑Ô∏è ID: {order_result.get('order_id', 'N/A')}\n"
                    f"üí± {side.upper()} {size} –ø–æ —Ü–µ–Ω–µ ${price:.4f}"
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {str(e)}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_notifier = TelegramNotifier(
    bot_token=config.telegram.TELEGRAM_BOT_TOKEN,
    chat_id=config.telegram.TELEGRAM_CHAT_ID,
)
