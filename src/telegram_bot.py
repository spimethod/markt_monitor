"""
Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
"""

from datetime import datetime
from typing import Dict, List, Optional, Union, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from telegram.constants import ParseMode
from loguru import logger

from src.config.settings import config


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""

    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.app = None
        self.bot_status = "stopped"
        self.trading_enabled = True
        self.trading_engine = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫

        self._initialize_bot()

    def set_trading_engine(self, trading_engine):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫"""
        self.trading_engine = trading_engine

    def _initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        try:
            self.app = Application.builder().token(self.bot_token).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.app.add_handler(CommandHandler("start", self._cmd_start))
            self.app.add_handler(CommandHandler("status", self._cmd_status))
            self.app.add_handler(CommandHandler("balance", self._cmd_balance))
            self.app.add_handler(CommandHandler("positions", self._cmd_positions))
            self.app.add_handler(CommandHandler("stop", self._cmd_stop_trading))
            self.app.add_handler(
                CommandHandler("start_trading", self._cmd_start_trading)
            )
            self.app.add_handler(CommandHandler("config", self._cmd_config))
            self.app.add_handler(CommandHandler("logs", self._cmd_logs))
            self.app.add_handler(CommandHandler("help", self._cmd_help))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
            self.app.add_handler(CallbackQueryHandler(self._handle_callback))

            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            raise

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            if self.app:
                await self.app.initialize()
                await self.app.start()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
                await self.send_startup_notification()

                self.bot_status = "running"
                logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:  # pylint: disable=broad-exception-caught
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            raise

    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞"""
        try:
            if self.app:
                await self.app.stop()
                await self.app.shutdown()

            self.bot_status = "stopped"
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞: {e}")

    async def send_message(
        self, text: str, parse_mode: str = ParseMode.HTML, reply_markup=None
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            if self.app and self.app.bot:
                await self.app.bot.send_message(
                    chat_id=self.chat_id,
                    text=text,
                    parse_mode=parse_mode,
                    reply_markup=reply_markup,
                    disable_web_page_preview=True,
                )
        except Exception as e:  # pylint: disable=broad-exception-caught
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

    async def send_startup_notification(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        text = f"""
üöÄ <b>Polymarket Trading Bot –∑–∞–ø—É—â–µ–Ω</b>

üìä <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${config.trading.POSITION_SIZE_USD}
‚Ä¢ –¶–µ–ª—å –ø—Ä–∏–±—ã–ª–∏: {config.trading.PROFIT_TARGET_PERCENT}%
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {config.trading.TRADING_STRATEGY}
‚Ä¢ –°—Ç–æ—Ä–æ–Ω–∞: {config.trading.POSITION_SIDE}
‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {config.trading.MAX_OPEN_POSITIONS}

‚è∞ <i>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
            [InlineKeyboardButton("üìã –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="config")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.send_message(text, reply_markup=reply_markup)

    async def send_new_market_notification(self, market_data: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä—ã–Ω–∫–µ"""
        if not config.telegram.NOTIFY_NEW_MARKETS:
            return

        text = f"""
üÜï <b>–ù–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {market_data.get('question', 'N/A')}
üè∑Ô∏è <b>ID:</b> <code>{market_data.get('id', 'N/A')}</code>
üí∞ <b>–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:</b> ${market_data.get('liquidity', 0):.2f}
üìä <b>–û–±—ä–µ–º 24—á:</b> ${market_data.get('volume24hr', 0):.2f}

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        await self.send_message(text)

    async def send_trade_notification(self, trade_data: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ"""
        if not config.telegram.NOTIFY_TRADES:
            return

        action = "üü¢ –ü–û–ö–£–ü–ö–ê" if trade_data.get("side") == "BUY" else "üî¥ –ü–†–û–î–ê–ñ–ê"

        text = f"""
{action} <b>–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω</b>

üè∑Ô∏è <b>ID:</b> <code>{trade_data.get('order_id', 'N/A')}</code>
üí± <b>–¢–æ–∫–µ–Ω:</b> <code>{trade_data.get('token_id', 'N/A')[:20]}...</code>
üìä <b>–†–∞–∑–º–µ—Ä:</b> {trade_data.get('size', 0):.2f}
üí∞ <b>–¶–µ–Ω–∞:</b> ${trade_data.get('price', 0):.4f}
üíµ <b>–°—É–º–º–∞:</b> ${trade_data.get('size', 0) * trade_data.get('price', 0):.2f}

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        await self.send_message(text)

    async def send_profit_notification(self, profit_data: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã–ª–∏"""
        if not config.telegram.NOTIFY_PROFITS:
            return

        profit_percent = profit_data.get("profit_percent", 0)
        profit_emoji = "üíö" if profit_percent > 0 else "‚ù§Ô∏è"

        text = f"""
{profit_emoji} <b>–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞</b>

üè∑Ô∏è <b>ID:</b> <code>{profit_data.get('order_id', 'N/A')}</code>
üìä <b>–ü—Ä–∏–±—ã–ª—å:</b> {profit_percent:.2f}%
üí∞ <b>–°—É–º–º–∞ P&L:</b> ${profit_data.get('pnl_amount', 0):.2f}
üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {profit_data.get('reason', 'N/A')}

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("üìã –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.send_message(text, reply_markup=reply_markup)

    async def send_error_notification(self, error_data: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if not config.telegram.NOTIFY_ERRORS:
            return

        text = f"""
üö® <b>–û—à–∏–±–∫–∞</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {error_data.get('message', 'N/A')}
üîß <b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç:</b> {error_data.get('component', 'N/A')}
‚ö†Ô∏è <b>–£—Ä–æ–≤–µ–Ω—å:</b> {error_data.get('level', 'ERROR')}

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        await self.send_message(text)

    async def _get_current_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        try:
            if self.trading_engine:
                stats = await self.trading_engine.get_stats()
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
                stats["is_running"] = self.trading_engine.is_running
                stats["is_trading_enabled"] = self.trading_engine.is_trading_enabled
                return stats
            else:
                logger.warning("Trading engine –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ telegram –±–æ—Ç–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞: {e}")
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        return {
            "total_trades": 0,
            "successful_trades": 0,
            "total_profit": 0.0,
            "daily_trades": 0,
            "is_running": False,
            "is_trading_enabled": False,
            "open_positions": 0,
        }

    def _get_current_balance(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            if self.trading_engine and hasattr(self.trading_engine, "client"):
                balance = self.trading_engine.client.get_account_balance()
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å: ${balance}")
                return balance
            else:
                logger.warning("Trading engine –∏–ª–∏ client –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return None

    def _get_detailed_balance(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Polymarket Data API"""
        try:
            if not self.trading_engine or not hasattr(self.trading_engine, "client"):
                logger.warning("Trading engine –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞")
                return {"free_usdc": None, "positions_value": None, "total": None}
            
            client = self.trading_engine.client
            if not client.account:
                logger.warning("Account –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞")
                return {"free_usdc": None, "positions_value": None, "total": None}
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            addresses_to_check = []
            if client.config.polymarket.POLYMARKET_PROXY_ADDRESS:
                addresses_to_check.append(client.config.polymarket.POLYMARKET_PROXY_ADDRESS)
            main_address = client.get_address()
            if main_address:
                addresses_to_check.append(main_address)
            
            if not addresses_to_check:
                logger.warning("–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞")
                return {"free_usdc": None, "positions_value": None, "total": None}
            
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è {len(addresses_to_check)} –∞–¥—Ä–µ—Å–æ–≤")
            
            # –ü—Ä–æ–±—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            for user_address in addresses_to_check:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π
                    positions_value = client._get_positions_value(user_address)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π USDC
                    proxy_wallet, free_usdc = client._get_free_usdc_balance(user_address)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –±–∞–ª–∞–Ω—Å USDC
                    direct_usdc = client._check_usdc_balance_for_address(user_address)
                    
                    if positions_value is not None or free_usdc is not None or direct_usdc is not None:
                        total = 0.0
                        final_free_usdc = 0.0
                        final_positions_value = positions_value or 0.0
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ USDC
                        if free_usdc and free_usdc > 0:
                            final_free_usdc = free_usdc
                        elif direct_usdc and direct_usdc > 0:
                            final_free_usdc = direct_usdc
                        
                        total = final_positions_value + final_free_usdc
                        
                        result = {
                            "free_usdc": final_free_usdc,
                            "positions_value": final_positions_value,
                            "total": total if total > 0 else None,
                            "proxy_wallet": proxy_wallet,
                            "checked_address": user_address
                        }
                        
                        logger.debug(f"–î–µ—Ç–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {result}")
                        return result
                        
                except Exception as addr_e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞ {user_address}: {addr_e}")
                    continue
            
            logger.info("–î–µ—Ç–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∞–¥—Ä–µ—Å–µ")
            return {"free_usdc": None, "positions_value": None, "total": None}
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {"free_usdc": None, "positions_value": None, "total": None}

    def _get_open_positions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if self.trading_engine and hasattr(self.trading_engine, "client"):
            return [
                p
                for p in self.trading_engine.client.active_positions.values()
                if p["status"] == "open"
            ]
        return []

    def _format_timestamp(self, timestamp: Union[datetime, str, None]) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timestamp"""
        if isinstance(timestamp, datetime):
            return timestamp.strftime("%Y-%m-%d %H:%M")
        if isinstance(timestamp, str):
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –≤ datetime
                dt = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
                return dt.strftime("%Y-%m-%d %H:%M")
            except (ValueError, AttributeError):
                return timestamp[:16] if len(timestamp) > 16 else timestamp
        return "N/A"

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def _cmd_start(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):  # pylint: disable=unused-argument
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if not update.message:
            return

        text = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Polymarket Trading Bot!</b>

ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ—Ä–≥—É–µ—Ç –Ω–∞ Polymarket, –ø–æ–∫—É–ø–∞—è –ø–æ–∑–∏—Ü–∏–∏ NO –Ω–∞ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö.

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/balance - –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
/positions - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/start_trading - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
/help - –°–ø—Ä–∞–≤–∫–∞

üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
        """

        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _cmd_status(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):  # pylint: disable=unused-argument
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        if not update.message:
            return

        stats = await self._get_current_stats()

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        detailed_balance = self._get_detailed_balance()
        balance_text = ""
        
        if detailed_balance["total"] is not None:
            balance_text = f"""üí∞ <b>–ë–∞–ª–∞–Ω—Å (—á–µ—Ä–µ–∑ Polymarket API):</b>
‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã–π USDC: ${detailed_balance['free_usdc']:.2f}
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π: ${detailed_balance['positions_value']:.2f}
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${detailed_balance['total']:.2f}"""
            if detailed_balance.get("proxy_wallet"):
                balance_text += f"\n‚Ä¢ Proxy Wallet: {detailed_balance['proxy_wallet'][:10]}..."
        else:
            fallback_balance = self._get_current_balance() or 0
            balance_text = f"üí∞ <b>–ë–∞–ª–∞–Ω—Å (fallback):</b> ${fallback_balance:.2f}"

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_status_text = ""
        if self.trading_engine and hasattr(self.trading_engine, "client") and hasattr(self.trading_engine.client, "db_manager"):
            db_status = self.trading_engine.client.db_manager.get_database_status()
            db_emoji = "üóÑÔ∏è" if db_status["engine_type"] == "PostgreSQL" else "üìÅ" if db_status["engine_type"] == "SQLite" else "‚ùå"
            db_status_text = f"\n{db_emoji} <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {db_status['engine_type']}"
            if db_status.get("using_sqlite_fallback"):
                db_status_text += " (fallback)"

        text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

ü§ñ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {self.bot_status}
üîÑ <b>–¢–æ—Ä–≥–æ–≤–ª—è:</b> {'–í–∫–ª—é—á–µ–Ω–∞' if stats.get('is_trading_enabled', False) else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
üìà <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> {stats.get('open_positions', 0)}{db_status_text}
{balance_text}

üìã <b>–°–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –°–¥–µ–ª–æ–∫: {stats.get('daily_trades', 0)}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${stats.get('total_profit', 0):.2f}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_trades', 0)}/{stats.get('total_trades', 0)}

‚è∞ <i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
            [InlineKeyboardButton("üìã –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _cmd_balance(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):  # pylint: disable=unused-argument
        """–ö–æ–º–∞–Ω–¥–∞ /balance"""
        if not update.message:
            return

        balance = self._get_current_balance()
        stats = await self._get_current_stats()
        open_positions = self._get_open_positions()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –ø–æ–∑–∏—Ü–∏—è—Ö
        in_positions = sum(p.get("size", 0) * p.get("price", 0) for p in open_positions)

        text = f"""
üí∞ <b>–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞</b>

üíµ <b>USDC:</b> ${balance or 0:.2f}
üìä <b>–í –ø–æ–∑–∏—Ü–∏—è—Ö:</b> ${in_positions:.2f}
üí∏ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> ${(balance or 0) - in_positions:.2f}

üìà <b>P&L —Å–µ–≥–æ–¥–Ω—è:</b> ${stats.get('total_profit', 0):.2f}
üìä <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {stats.get('total_trades', 0)}

‚è∞ <i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        await update.message.reply_text(text, parse_mode=ParseMode.HTML)

    async def _cmd_positions(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):  # pylint: disable=unused-argument
        """–ö–æ–º–∞–Ω–¥–∞ /positions"""
        if not update.message:
            return

        open_positions = self._get_open_positions()

        if not open_positions:
            text = f"""
üìã <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>

üîç <i>–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</i>

‚è∞ <i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
            """
        else:
            text = "üìã <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"

            for i, position in enumerate(
                open_positions[:5], 1
            ):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –ø–æ–∑–∏—Ü–∏–π
                timestamp = position.get("timestamp")
                time_str = self._format_timestamp(timestamp)

                text += f"""
<b>{i}.</b> {position.get('side', 'N/A')} {position.get('size', 0):.2f}
üí∞ –¶–µ–Ω–∞: ${position.get('price', 0):.4f}
‚è∞ –í—Ä–µ–º—è: {time_str}
üè∑Ô∏è ID: <code>{position.get('order_id', 'N/A')[:8]}...</code>

"""

            if len(open_positions) > 5:
                text += f"<i>... –∏ –µ—â–µ {len(open_positions) - 5} –ø–æ–∑–∏—Ü–∏–π</i>\n\n"

            text += f"‚è∞ <i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.utcnow().strftime('%H:%M:%S')} UTC</i>"

        keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="positions")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _cmd_stop_trading(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):  # pylint: disable=unused-argument
        """–ö–æ–º–∞–Ω–¥–∞ /stop"""
        if not update.message:
            return

        if self.trading_engine:
            self.trading_engine.disable_trading()

        self.trading_enabled = False

        text = f"""
‚èπÔ∏è <b>–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>

üö´ –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏
üîÑ –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_trading

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="start_trading"
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _cmd_start_trading(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):  # pylint: disable=unused-argument
        """–ö–æ–º–∞–Ω–¥–∞ /start_trading"""
        if not update.message:
            return

        if self.trading_engine:
            self.trading_engine.enable_trading()

        self.trading_enabled = True

        text = f"""
‚ñ∂Ô∏è <b>–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞</b>

‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ —Ä—ã–Ω–∫–∏
üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∞–∫—Ç–∏–≤–Ω–æ
üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="stop")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _cmd_config(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /config"""
        if not update.message:
            return

        text = f"""
‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞</b>

üí∞ <b>–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${config.trading.POSITION_SIZE_USD}
‚Ä¢ –¶–µ–ª—å –ø—Ä–∏–±—ã–ª–∏: {config.trading.PROFIT_TARGET_PERCENT}%
‚Ä¢ Stop-loss: {config.trading.STOP_LOSS_PERCENT}%
‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {config.trading.MAX_OPEN_POSITIONS}
‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è: {config.trading.MAX_POSITION_HOURS}—á

üìä <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b>
‚Ä¢ –†–µ–∂–∏–º: {config.trading.TRADING_STRATEGY}
‚Ä¢ –°—Ç–æ—Ä–æ–Ω–∞: {config.trading.POSITION_SIDE}
‚Ä¢ –ú–∏–Ω. –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${config.trading.MIN_LIQUIDITY_USD}

üîÑ <b>API:</b>
‚Ä¢ –†–æ—Ç–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if config.trading.API_ROTATION_ENABLED else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {config.trading.REQUEST_DELAY_SECONDS}—Å

üí¨ <i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway</i>
        """

        await update.message.reply_text(text, parse_mode=ParseMode.HTML)

    async def _cmd_logs(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):  # pylint: disable=unused-argument
        """–ö–æ–º–∞–Ω–¥–∞ /logs"""
        if not update.message:
            return

        text = """
üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏</b>

<code>
[INFO] Bot started successfully
[INFO] WebSocket connected
[INFO] Market monitor active
[INFO] No new markets found
</code>

üí° <i>–ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ñ–∞–π–ª–µ logs/bot.log</i>
        """

        await update.message.reply_text(text, parse_mode=ParseMode.HTML)

    async def _cmd_help(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):  # pylint: disable=unused-argument
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        if not update.message:
            return

        text = """
üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/balance - –ë–∞–ª–∞–Ω—Å –∏ P&L
/positions - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏

üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/start_trading - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/config - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ

ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚Ä¢ –ù–æ–≤—ã–µ —Ä—ã–Ω–∫–∏
‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
‚Ä¢ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å –ø—Ä–∏–±—ã–ª—å—é
‚Ä¢ –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º</i>
        """

        await update.message.reply_text(text, parse_mode=ParseMode.HTML)

    async def _handle_callback(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            if not query:
                logger.warning("Callback query –ø—É—Å—Ç–æ–π")
                return

            await query.answer()

            data = query.data
            if not data:
                logger.warning("Callback data –ø—É—Å—Ç–∞—è")
                return

            logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback: {data}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ update
            if data == "status":
                await self._handle_status_callback(query)
            elif data == "balance":
                await self._handle_balance_callback(query)
            elif data == "positions":
                await self._handle_positions_callback(query)
            elif data == "config":
                await self._handle_config_callback(query)
            elif data == "stop":
                await self._handle_stop_callback(query)
            elif data == "start_trading":
                await self._handle_start_trading_callback(query)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è callback –∫–æ–º–∞–Ω–¥–∞: {data}")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
            try:
                if query:
                    await query.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        parse_mode=ParseMode.HTML
                    )
            except Exception as edit_e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {edit_e}")

    async def _handle_status_callback(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ status callback")
            stats = await self._get_current_stats()
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            detailed_balance = self._get_detailed_balance()
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {detailed_balance}")
            balance_text = ""
            
            if detailed_balance["total"] is not None:
                balance_text = f"""üí∞ <b>–ë–∞–ª–∞–Ω—Å (—á–µ—Ä–µ–∑ Polymarket API):</b>
‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã–π USDC: ${detailed_balance['free_usdc']:.2f}
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π: ${detailed_balance['positions_value']:.2f}
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${detailed_balance['total']:.2f}"""
                if detailed_balance.get("proxy_wallet"):
                    balance_text += f"\n‚Ä¢ Proxy Wallet: {detailed_balance['proxy_wallet'][:10]}..."
            else:
                fallback_balance = self._get_current_balance() or 0
                balance_text = f"üí∞ <b>–ë–∞–ª–∞–Ω—Å (fallback):</b> ${fallback_balance:.2f}"

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_status_text = ""
            try:
                if self.trading_engine and hasattr(self.trading_engine, "client") and hasattr(self.trading_engine.client, "db_manager"):
                    db_status = self.trading_engine.client.db_manager.get_database_status()
                    db_emoji = "üóÑÔ∏è" if db_status["engine_type"] == "PostgreSQL" else "üìÅ" if db_status["engine_type"] == "SQLite" else "‚ùå"
                    db_status_text = f"\n{db_emoji} <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {db_status['engine_type']}"
                    if db_status.get("using_sqlite_fallback"):
                        db_status_text += " (fallback)"
            except Exception as db_e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ë–î: {db_e}")
                db_status_text = "\n‚ùì <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

            text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

ü§ñ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {self.bot_status}
üîÑ <b>–¢–æ—Ä–≥–æ–≤–ª—è:</b> {'–í–∫–ª—é—á–µ–Ω–∞' if stats.get('is_trading_enabled', False) else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
üìà <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> {stats.get('open_positions', 0)}{db_status_text}
{balance_text}

üìã <b>–°–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –°–¥–µ–ª–æ–∫: {stats.get('daily_trades', 0)}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${stats.get('total_profit', 0):.2f}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_trades', 0)}/{stats.get('total_trades', 0)}

‚è∞ <i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
            """

            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
                [InlineKeyboardButton("üìã –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
            )
            logger.debug("Status callback —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_status_callback: {e}")
            try:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status",
                    parse_mode=ParseMode.HTML
                )
            except Exception as edit_e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {edit_e}")

    async def _handle_balance_callback(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –±–∞–ª–∞–Ω—Å–∞"""
        balance = self._get_current_balance()
        stats = await self._get_current_stats()
        open_positions = self._get_open_positions()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –ø–æ–∑–∏—Ü–∏—è—Ö
        in_positions = sum(p.get("size", 0) * p.get("price", 0) for p in open_positions)

        text = f"""
üí∞ <b>–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞</b>

üíµ <b>USDC:</b> ${balance or 0:.2f}
üìä <b>–í –ø–æ–∑–∏—Ü–∏—è—Ö:</b> ${in_positions:.2f}
üí∏ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> ${(balance or 0) - in_positions:.2f}

üìà <b>P&L —Å–µ–≥–æ–¥–Ω—è:</b> ${stats.get('total_profit', 0):.2f}
üìä <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {stats.get('total_trades', 0)}

‚è∞ <i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        await query.edit_message_text(text, parse_mode=ParseMode.HTML)

    async def _handle_positions_callback(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–æ–∑–∏—Ü–∏–π"""
        open_positions = self._get_open_positions()

        if not open_positions:
            text = f"""
üìã <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>

üîç <i>–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</i>

‚è∞ <i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
            """
        else:
            text = "üìã <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"

            for i, position in enumerate(
                open_positions[:5], 1
            ):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –ø–æ–∑–∏—Ü–∏–π
                timestamp = position.get("timestamp")
                time_str = self._format_timestamp(timestamp)

                text += f"""
<b>{i}.</b> {position.get('side', 'N/A')} {position.get('size', 0):.2f}
üí∞ –¶–µ–Ω–∞: ${position.get('price', 0):.4f}
‚è∞ –í—Ä–µ–º—è: {time_str}
üè∑Ô∏è ID: <code>{position.get('order_id', 'N/A')[:8]}...</code>

"""

            if len(open_positions) > 5:
                text += f"<i>... –∏ –µ—â–µ {len(open_positions) - 5} –ø–æ–∑–∏—Ü–∏–π</i>\n\n"

            text += f"‚è∞ <i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.utcnow().strftime('%H:%M:%S')} UTC</i>"

        keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="positions")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _handle_config_callback(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        text = f"""
‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞</b>

üí∞ <b>–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${config.trading.POSITION_SIZE_USD}
‚Ä¢ –¶–µ–ª—å –ø—Ä–∏–±—ã–ª–∏: {config.trading.PROFIT_TARGET_PERCENT}%
‚Ä¢ Stop-loss: {config.trading.STOP_LOSS_PERCENT}%
‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {config.trading.MAX_OPEN_POSITIONS}
‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è: {config.trading.MAX_POSITION_HOURS}—á

üìä <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b>
‚Ä¢ –†–µ–∂–∏–º: {config.trading.TRADING_STRATEGY}
‚Ä¢ –°—Ç–æ—Ä–æ–Ω–∞: {config.trading.POSITION_SIDE}
‚Ä¢ –ú–∏–Ω. –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${config.trading.MIN_LIQUIDITY_USD}

üîÑ <b>API:</b>
‚Ä¢ –†–æ—Ç–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if config.trading.API_ROTATION_ENABLED else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {config.trading.REQUEST_DELAY_SECONDS}—Å

üí¨ <i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway</i>
        """

        await query.edit_message_text(text, parse_mode=ParseMode.HTML)

    async def _handle_stop_callback(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.trading_engine:
            self.trading_engine.disable_trading()

        self.trading_enabled = False

        text = f"""
‚èπÔ∏è <b>–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>

üö´ –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏
üîÑ –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_trading

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="start_trading"
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )

    async def _handle_start_trading_callback(self, query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.trading_engine:
            self.trading_engine.enable_trading()

        self.trading_enabled = True

        text = f"""
‚ñ∂Ô∏è <b>–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞</b>

‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ —Ä—ã–Ω–∫–∏
üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∞–∫—Ç–∏–≤–Ω–æ
üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω

‚è∞ <i>{datetime.utcnow().strftime('%H:%M:%S')} UTC</i>
        """

        keyboard = [
            [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", callback_data="stop")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è
telegram_notifier = TelegramNotifier(
    bot_token=config.telegram.TELEGRAM_BOT_TOKEN,
    chat_id=config.telegram.TELEGRAM_CHAT_ID,
)
