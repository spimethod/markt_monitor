import asyncio
import time
from datetime import datetime
import httpx
from logging import getLogger

logger = getLogger(__name__)

# –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å–∞–±–≥—Ä–∞—Ñ–∞
from src.config.settings import config

if config.polymarket.THEGRAPH_API_KEY:
    SUBGRAPH_URL = (
        f"https://gateway.thegraph.com/api/{config.polymarket.THEGRAPH_API_KEY}" \
        f"/subgraphs/id/{config.polymarket.SUBGRAPH_ID}"
    )
else:
    # Fallback: —Å—Ç–∞—Ä—ã–π hosted service (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á—ë–Ω)
    SUBGRAPH_URL = "https://api.thegraph.com/subgraphs/name/polymarket/polymarket-v3/"

# GraphQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤
MARKETS_QUERY = """
query GetNewMarkets($min_timestamp: BigInt!, $limit: Int!) {
  markets(
    first: $limit,
    orderBy: createdTimestamp,
    orderDirection: desc,
    where: {
      createdTimestamp_gt: $min_timestamp,
      active: true,
      acceptingOrders: true
    }
  ) {
    id
    question
    createdTimestamp
    tokens {
      id
      name
      outcome
      price
    }
    conditionId
    active
    acceptingOrders
  }
}
"""

async def fetch_new_markets(max_age_minutes: int = 10) -> list | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç, –∏—Å–ø–æ–ª—å–∑—É—è Subgraph.

    Args:
        max_age_minutes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ä—ã–Ω–∫–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö.

    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω.
        None, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API.
    """
    try:
        now = int(time.time())
        min_timestamp = now - (max_age_minutes * 60)

        variables = {
            "min_timestamp": str(min_timestamp),  # BigInt –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            "limit": 100
        }
        
        payload = {
            "query": MARKETS_QUERY,
            "variables": variables
        }

        logger.info(f"üîó –ó–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ Subgraph: {SUBGRAPH_URL}")
        logger.debug(f"   üìã Variables: {variables}")

        async with httpx.AsyncClient(timeout=15.0, follow_redirects=True) as client:
            response = await client.post(SUBGRAPH_URL, json=payload)
            response.raise_for_status()

        data = response.json()

        if "errors" in data:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Subgraph API: {data['errors']}")
            return None

        if "data" not in data or "markets" not in data["data"]:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Subgraph: {data}")
            return None

        markets = data["data"]["markets"]
        logger.info(f"üéØ Subgraph –≤–µ—Ä–Ω—É–ª {len(markets)} –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ (‚â§{max_age_minutes} –º–∏–Ω)")
        return markets

    except httpx.HTTPStatusError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Subgraph: {e.response.status_code} - {e.response.text}")
        return None
    except httpx.RequestError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Subgraph: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Subgraph: {e}")
        return None

if __name__ == '__main__':
    async def main():
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Subgraph –∫–ª–∏–µ–Ω—Ç–∞...")
        new_markets = await fetch_new_markets(max_age_minutes=60)
        if new_markets is not None:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(new_markets)} —Ä—ã–Ω–∫–æ–≤.")
            for market in new_markets:
                created_dt = datetime.fromtimestamp(int(market['createdTimestamp']))
                print(f"- {market['question']} (–°–æ–∑–¥–∞–Ω: {created_dt.strftime('%Y-%m-%d %H:%M')})")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–∫–∏.")

    asyncio.run(main()) 