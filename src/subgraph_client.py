import asyncio
import time
from datetime import datetime
import httpx
from logging import getLogger

logger = getLogger(__name__)

# –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å–∞–±–≥—Ä–∞—Ñ–∞
from src.config.settings import config

if config.polymarket.THEGRAPH_API_KEY:
    SUBGRAPH_URL = (
        f"https://gateway.thegraph.com/api/{config.polymarket.THEGRAPH_API_KEY}" \
        f"/subgraphs/id/{config.polymarket.SUBGRAPH_ID}"
    )
else:
    # Fallback: —Å—Ç–∞—Ä—ã–π hosted service (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á—ë–Ω)
    SUBGRAPH_URL = "https://api.thegraph.com/subgraphs/name/polymarket/polymarket-v3/"

# —à–∞–±–ª–æ–Ω –∑–∞–ø—Ä–æ—Å–∞ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º root-–ø–æ–ª–µ
QUERY_TEMPLATE = """
query GetNewMarkets($ts: Int!, $limit: Int!) {{
  {field}(
    first: $limit
    orderBy: creationTimestamp
    orderDirection: desc
    where: {{
      creationTimestamp_gt: $ts
      active: true
      acceptingOrders: true
    }}
  ) {{
    id
    question
    createdTimestamp
    active
    acceptingOrders
    tokens {{
      id
      outcome
      price
    }}
  }}
}}"""

async def fetch_new_markets(max_age_minutes: int = 10) -> list | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç, –∏—Å–ø–æ–ª—å–∑—É—è Subgraph.

    Args:
        max_age_minutes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ä—ã–Ω–∫–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö.

    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω.
        None, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API.
    """
    try:
        now = int(time.time())
        min_timestamp = now - (max_age_minutes * 60)

        variables = {
            "ts": min_timestamp,
            "limit": 100,
        }
        
        # –≤—ã–±–∏—Ä–∞–µ–º root-–ø–æ–ª–µ
        primary_field = config.polymarket.SUBGRAPH_FIELD.strip() or None
        field_candidates = [primary_field] if primary_field else ["markets", "clobMarkets", "marketEntities"]

        markets: list | None = None
        last_error = None
        for fld in field_candidates:
            if not fld:
                continue
            query_str = QUERY_TEMPLATE.format(field=fld)
            payload = {"query": query_str, "variables": variables}

            logger.info(f"üîó –ó–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ Subgraph: {SUBGRAPH_URL}")
            logger.debug(f"   üìã Variables: {variables}")

            async with httpx.AsyncClient(timeout=15.0, follow_redirects=True) as client:
                response = await client.post(SUBGRAPH_URL, json=payload)
            data = response.json()

            if "errors" in data:
                last_error = data["errors"]
                # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–ª—è ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                if any("has no field" in err.get("message", "") for err in data["errors"]):
                    logger.warning(f"Root-–ø–æ–ª–µ '{fld}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—É–±–≥—Ä–∞—Ñ–µ, –ø—Ä–æ–±—É—é –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç‚Ä¶")
                    continue
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Subgraph API: {data['errors']}")
                    return None
            else:
                markets = data["data"].get(fld)
                if markets is not None:
                    break

        if markets is None:
            logger.error(f"‚ùå Subgraph –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä—ã–Ω–∫–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
            return None

        logger.info(f"üéØ Subgraph –≤–µ—Ä–Ω—É–ª {len(markets)} –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ (‚â§{max_age_minutes} –º–∏–Ω)")
        return markets

    except httpx.HTTPStatusError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Subgraph: {e.response.status_code} - {e.response.text}")
        return None
    except httpx.RequestError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Subgraph: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Subgraph: {e}")
        return None

if __name__ == '__main__':
    async def main():
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Subgraph –∫–ª–∏–µ–Ω—Ç–∞...")
        new_markets = await fetch_new_markets(max_age_minutes=60)
        if new_markets is not None:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(new_markets)} —Ä—ã–Ω–∫–æ–≤.")
            for market in new_markets:
                created_dt = datetime.fromtimestamp(int(market['createdTimestamp']))
                print(f"- {market['question']} (–°–æ–∑–¥–∞–Ω: {created_dt.strftime('%Y-%m-%d %H:%M')})")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–∫–∏.")

    asyncio.run(main()) 