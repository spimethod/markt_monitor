"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Polymarket API –∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
"""
import asyncio
import binascii
import json
import threading
from typing import Dict, Optional, Any
from datetime import datetime

import requests
import websockets
from eth_account.signers.local import LocalAccount
from loguru import logger
from web3 import Account
from websockets.client import WebSocketClientProtocol

from src.config.settings import Config
from src.database.manager import DatabaseManager

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥–∞, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
# –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑
config_instance = Config()

async def default_message_handler(message: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket: {message}")


class PolymarketClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Polymarket API –∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏"""

    def __init__(self, message_handler=default_message_handler):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.config: Config = config_instance
        self.db_manager = DatabaseManager()
        self.account: Optional[LocalAccount] = None
        self.is_connected = False
        self.websocket: Optional[WebSocketClientProtocol] = None
        self.ws_thread: Optional[threading.Thread] = None
        self.loop: Optional[asyncio.AbstractEventLoop] = None
        self.message_handler = message_handler
        self.is_running = True

        if self.config.polymarket.PRIVATE_KEY:
            try:
                self.account = Account.from_key(self.config.polymarket.PRIVATE_KEY)
                if self.account:
                    logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {self.account.address} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            except (ValueError, binascii.Error) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PRIVATE_KEY.")
        else:
            logger.warning("PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–æ—Ä–≥–æ–≤–ª—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

        if self.config.polymarket.USE_WEBSOCKET:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º WebSocket –≤ production –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            logger.info("WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤ production")
            # self._start_websocket_listener()

    def get_address(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥—Ä–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω."""
        return self.account.address if self.account else None

    def place_order(self, token_id: str, side: str, size: float, price: float) -> Optional[Dict]:
        """
        –†–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É.
        """
        if not self.account:
            logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return None
            
        logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: {side} {size} —Ç–æ–∫–µ–Ω–æ–≤ {token_id} –ø–æ —Ü–µ–Ω–µ {price}")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        order_data = {
            "token_id": token_id, "price": str(price), "size": str(size),
            "side": side, "status": "placed", "id": "mock_order_id"
        }
        return order_data

    def get_markets(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤"""
        try:
            url = "https://clob.polymarket.com/markets"
            response = self._make_request("GET", url)
            
            if not response:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API —Ä—ã–Ω–∫–æ–≤")
                return []
            
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–º–µ–Ω–Ω–æ —Å–ø–∏—Å–æ–∫
            if isinstance(data, list):
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Ä—ã–Ω–∫–æ–≤ –∏–∑ API")
                return data
            elif isinstance(data, dict):
                # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç —Å —Ä—ã–Ω–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏
                if 'data' in data and isinstance(data['data'], list):
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data['data'])} —Ä—ã–Ω–∫–æ–≤ –∏–∑ API (–≤ –ø–æ–ª–µ data)")
                    return data['data']
                elif 'markets' in data and isinstance(data['markets'], list):
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data['markets'])} —Ä—ã–Ω–∫–æ–≤ –∏–∑ API (–≤ –ø–æ–ª–µ markets)")
                    return data['markets']
                else:
                    logger.warning(f"API –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç –±–µ–∑ –º–∞—Å—Å–∏–≤–∞ —Ä—ã–Ω–∫–æ–≤: {list(data.keys())}")
                    return []
            else:
                logger.warning(f"API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)} - {str(data)[:100]}")
                return []
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤: {e}")
            return []

    def get_current_price(self, token_id: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞"""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.warning("–§—É–Ω–∫—Ü–∏—è get_current_price –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return 0.5

    def get_account_balance(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ USDC –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not self.account:
            logger.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            return None
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
        # –í –ø—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Polymarket API
        mock_balance = 100.0  # $100 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞: ${mock_balance}")
        return mock_balance

    async def monitor_balance(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
        if not self.account:
            return
        
        try:
            current_balance = self.get_account_balance()
            if current_balance is None:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if not hasattr(self, '_previous_balance'):
                self._previous_balance = current_balance
                logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞: ${current_balance:.2f}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–±–æ–ª—å—à–µ 5%)
            balance_change = current_balance - self._previous_balance
            change_percent = abs(balance_change) / self._previous_balance * 100 if self._previous_balance > 0 else 0
            
            if change_percent >= 5.0:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 5%
                from src.telegram_bot import telegram_notifier
                
                change_emoji = "üìà" if balance_change > 0 else "üìâ"
                await telegram_notifier.send_message(
                    f"{change_emoji} <b>–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                    f"üí∞ <b>–ë—ã–ª–æ:</b> ${self._previous_balance:.2f}\n"
                    f"üí∞ <b>–°—Ç–∞–ª–æ:</b> ${current_balance:.2f}\n"
                    f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {balance_change:+.2f} ({change_percent:+.1f}%)\n\n"
                    f"‚è∞ <i>{datetime.now().strftime('%H:%M:%S')} UTC</i>"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {balance_change:+.2f} ({change_percent:+.1f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å (–º–µ–Ω—å—à–µ $5)
            if current_balance < 5.0:
                from src.telegram_bot import telegram_notifier
                await telegram_notifier.send_message(
                    f"üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å!</b>\n\n"
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${current_balance:.2f}\n"
                    f"‚ö†Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏\n\n"
                    f"‚è∞ <i>{datetime.now().strftime('%H:%M:%S')} UTC</i>"
                )
                logger.warning(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance:.2f}")
            
            self._previous_balance = current_balance
            logger.debug(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞: ${current_balance:.2f}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")

    async def check_balance(self, frequency_seconds: int):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
        if not self.account:
            return
        
        try:
            current_balance = self.get_account_balance()
            if current_balance is None:
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            if not hasattr(self, '_balance_stats'):
                self._balance_stats = {
                    'initial_balance': current_balance,
                    'max_balance': current_balance,
                    'min_balance': current_balance,
                    'check_count': 0,
                    'last_check': datetime.now()
                }
                logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞: ${current_balance:.2f}")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self._balance_stats
            stats['check_count'] += 1
            stats['max_balance'] = max(stats['max_balance'], current_balance)
            stats['min_balance'] = min(stats['min_balance'], current_balance)
            stats['last_check'] = datetime.now()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–≤–æ–¥–∫–∏
            summary_interval_seconds = self.config.trading.BALANCE_SUMMARY_INTERVAL_MINUTES * 60
            checks_per_summary = max(1, summary_interval_seconds // frequency_seconds)
            
            # –ö–∞–∂–¥—ã–µ N –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ BALANCE_SUMMARY_INTERVAL_MINUTES)
            if stats['check_count'] % checks_per_summary == 0:
                from src.telegram_bot import telegram_notifier
                
                total_change = current_balance - stats['initial_balance']
                total_change_percent = (total_change / stats['initial_balance'] * 100) if stats['initial_balance'] > 0 else 0
                
                await telegram_notifier.send_message(
                    f"üìä <b>–°–≤–æ–¥–∫–∞ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                    f"üí∞ <b>–¢–µ–∫—É—â–∏–π:</b> ${current_balance:.2f}\n"
                    f"üéØ <b>–ù–∞—á–∞–ª—å–Ω—ã–π:</b> ${stats['initial_balance']:.2f}\n"
                    f"üìà <b>–ú–∞–∫—Å–∏–º—É–º:</b> ${stats['max_balance']:.2f}\n"
                    f"üìâ <b>–ú–∏–Ω–∏–º—É–º:</b> ${stats['min_balance']:.2f}\n"
                    f"üìä <b>–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {total_change:+.2f} ({total_change_percent:+.1f}%)\n"
                    f"üîÑ <b>–ü—Ä–æ–≤–µ—Ä–æ–∫:</b> {stats['check_count']}\n\n"
                    f"‚è∞ <i>{datetime.now().strftime('%H:%M:%S')} UTC</i>"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ #{stats['check_count']}, –∏–Ω—Ç–µ—Ä–≤–∞–ª {self.config.trading.BALANCE_SUMMARY_INTERVAL_MINUTES} –º–∏–Ω)")
            
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ #{stats['check_count']}: ${current_balance:.2f}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")

    def _make_request(self, method, url, **kwargs) -> Optional[requests.Response]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å"""
        try:
            response = requests.request(method, url, timeout=10, **kwargs)
            response.raise_for_status()
            return response
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
            return None

    async def check_and_close_positions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π."""
        if not self.account:
            return

        try:
            open_positions = await self.db_manager.get_open_positions()
            user_address = self.get_address()
            user_positions = [p for p in open_positions if p.get('user_address') == user_address]

            for trade in user_positions:
                current_price = self.get_current_price(trade['token_id'])
                if not current_price:
                    continue
                await self.db_manager.update_position_price(trade['id'], current_price)
                # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ ...
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")

    def stop_websocket(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        self.is_running = False
        if self.websocket and self.loop and self.loop.is_running():
            asyncio.run_coroutine_threadsafe(self.websocket.close(), self.loop)
        if self.ws_thread and self.ws_thread.is_alive():
            self.ws_thread.join(timeout=5)

    def _start_websocket_listener(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket —Å–ª—É—à–∞—Ç–µ–ª—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        self.ws_thread = threading.Thread(target=self._websocket_loop, daemon=True)
        self.ws_thread.start()

    def _websocket_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)
        self.loop.run_until_complete(self._websocket_handler())
        self.loop.close()

    async def _websocket_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π."""
        url = "wss://ws-subscriptions-clob.polymarket.com/ws/market"
        while self.is_running:
            try:
                async with websockets.connect(url) as websocket:
                    self.websocket = websocket
                    self.is_connected = True
                    logger.info("WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–∏...")
                    await websocket.send(json.dumps({"type": "market"}))
                    async for message in websocket:
                        try:
                            await self.message_handler(json.loads(message))
                        except json.JSONDecodeError:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            except Exception as e:
                self.is_connected = False
                logger.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)


class PolymarketClientException(Exception):
    pass
