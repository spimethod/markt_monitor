"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Polymarket API –∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
"""
import asyncio
import binascii
import json
import threading
import random
from typing import Dict, Optional, Any, Tuple
from datetime import datetime

import requests
import websockets
from eth_account.signers.local import LocalAccount
from loguru import logger
from web3 import Account
from websockets.client import WebSocketClientProtocol

from src.config.settings import Config
from src.database.manager import DatabaseManager

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥–∞, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
# –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑
config_instance = Config()

async def default_message_handler(message: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket: {message}")


class PolymarketClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Polymarket API –∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏"""

    def __init__(self, message_handler=default_message_handler):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.config: Config = config_instance
        self.db_manager = DatabaseManager()
        self.account: Optional[LocalAccount] = None
        self.is_connected = False
        self.websocket: Optional[WebSocketClientProtocol] = None
        self.ws_thread: Optional[threading.Thread] = None
        self.loop: Optional[asyncio.AbstractEventLoop] = None
        self.message_handler = message_handler
        self.is_running = True

        if self.config.polymarket.PRIVATE_KEY:
            try:
                self.account = Account.from_key(self.config.polymarket.PRIVATE_KEY)
                if self.account:
                    logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {self.account.address} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            except (ValueError, binascii.Error) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PRIVATE_KEY.")
        else:
            logger.warning("PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–æ—Ä–≥–æ–≤–ª—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

        if self.config.polymarket.USE_WEBSOCKET:
            logger.info("–ó–∞–ø—É—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ WebSocket —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
            self._start_websocket_listener()

    def get_address(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥—Ä–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω."""
        return self.account.address if self.account else None

    async def place_order(self, token_id: str, side: str, size: float, price: float, market_data: Optional[Dict] = None) -> Optional[Dict]:
        """
        –†–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î.
        """
        if not self.account:
            logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return None
            
        logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: {side} {size} —Ç–æ–∫–µ–Ω–æ–≤ {token_id} –ø–æ —Ü–µ–Ω–µ {price}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ä–¥–µ—Ä–∞
        import uuid
        order_id = f"order_{int(datetime.now().timestamp())}_{str(uuid.uuid4())[:8]}"
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        order_data = {
            "token_id": token_id, "price": str(price), "size": str(size),
            "side": side, "status": "placed", "id": order_id
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            market_id = None
            market_name = None
            if market_data:
                market_id = market_data.get("question_id") or market_data.get("condition_id") or market_data.get("market_slug")
                market_name = market_data.get("question", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫")[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            
            position_data = {
                "id": order_id,
                "token_id": token_id,
                "market_id": market_id,
                "user_address": self.account.address,
                "side": side,
                "size": size,
                "entry_price": price,
                "current_price": price,
                "target_profit": self.config.trading.PROFIT_TARGET_PERCENT,
                "stop_loss": self.config.trading.STOP_LOSS_PERCENT,
                "status": "open",
                "market_name": market_name
            }
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_success = await self.db_manager.save_position(position_data)
            if save_success:
                logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é {order_id} –≤ –ë–î")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –ë–î: {e}")
        
        return order_data

    def get_markets(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤"""
        try:
            url = "https://clob.polymarket.com/markets"
            logger.info(f"üîó –ó–∞–ø—Ä–æ—Å —Ä—ã–Ω–∫–æ–≤: {url}")
            
            response = self._make_request("GET", url)
            
            if not response:
                logger.warning("‚ùå Polymarket API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ")
                return []
                
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Polymarket API")
            logger.info(f"üìä –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(response)}")
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
            
            # –ü–æ–ª—É—á–∞–µ–º JSON –∏–∑ Response –æ–±—ä–µ–∫—Ç–∞
            try:
                data = response.json()
                logger.info(f"üìã JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, —Ç–∏–ø: {type(data)}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                logger.info(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response.text[:500]}")
                return []
            
            if isinstance(data, dict):
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - —Å–ª–æ–≤–∞—Ä—å, –∏—â–µ–º —Å–ø–∏—Å–æ–∫ –≤ –Ω–µ–º
                if 'data' in data:
                    markets = data['data']
                    logger.info(f"üìã –ù–∞–π–¥–µ–Ω—ã —Ä—ã–Ω–∫–∏ –≤ data['data']: {len(markets)} —à—Ç—É–∫")
                elif 'markets' in data:
                    markets = data['markets']  
                    logger.info(f"üìã –ù–∞–π–¥–µ–Ω—ã —Ä—ã–Ω–∫–∏ –≤ data['markets']: {len(markets)} —à—Ç—É–∫")
                else:
                    logger.warning(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
                    logger.info(f"üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON: {data}")
                    return []
            elif isinstance(data, list):
                markets = data
                logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω –ø—Ä—è–º–æ–π —Å–ø–∏—Å–æ–∫ —Ä—ã–Ω–∫–æ–≤: {len(markets)} —à—Ç—É–∫")
            else:
                logger.warning(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø JSON –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                return []
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö 3 —Ä—ã–Ω–∫–æ–≤
            for i, market in enumerate(markets[:3]):
                if isinstance(market, dict):
                    logger.info(f"üéØ –†—ã–Ω–æ–∫ #{i+1}:")
                    logger.info(f"   üìã –í–æ–ø—Ä–æ—Å: {market.get('question', 'N/A')}")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ API
                    market_id = market.get('question_id') or market.get('condition_id') or market.get('market_slug', 'N/A')
                    logger.info(f"   üÜî ID: {market_id}")
                    
                    # Polymarket API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä—è–º—ã–µ –ø–æ–ª—è liquidity/volume –≤ —ç—Ç–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥—É—é –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    logger.info(f"   üéÆ –ê–∫—Ç–∏–≤–µ–Ω: {market.get('active', False)}")
                    logger.info(f"   üîí –ó–∞–∫—Ä—ã—Ç: {market.get('closed', False)}")
                    logger.info(f"   üí± –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞: {market.get('accepting_orders', False)}")
                    
                    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–æ–≤ –∏–∑ tokens
                    tokens = market.get('tokens', [])
                    outcomes = market.get('outcomes', [])
                    total_outcomes = len(tokens) if tokens else len(outcomes)
                    logger.info(f"   üé≤ –ò—Å—Ö–æ–¥—ã: {total_outcomes}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤
                    if tokens:
                        for j, token in enumerate(tokens[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                            if isinstance(token, dict):
                                outcome_name = token.get('outcome', f'–ò—Å—Ö–æ–¥ {j+1}')
                                price = token.get('price', 'N/A')
                                logger.info(f"     üéØ {outcome_name}: —Ü–µ–Ω–∞ {price}")
                    
                    # –í—Ä–µ–º—è
                    end_date = market.get('end_date_iso') or market.get('game_start_time', 'N/A')
                    logger.info(f"   üìÖ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {end_date}")
                    
                    # –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ø–µ—Ä–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if i == 0:
                        logger.info(f"üîç –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –†–´–ù–ö–ê #1:")
                        for key, value in market.items():
                            value_str = str(value)[:100] + "..." if len(str(value)) > 100 else str(value)
                            logger.info(f"     {key}: {value_str}")
                    
                    # –î–µ—Ç–∞–ª–∏ –∏—Å—Ö–æ–¥–æ–≤ - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ç–æ–∫–µ–Ω—ã –≤–∞–∂–Ω–µ–µ
                    outcomes = market.get('outcomes', [])
                    for j, outcome in enumerate(outcomes):
                        if isinstance(outcome, dict):
                            logger.info(f"     –ò—Å—Ö–æ–¥ {j+1}: {outcome.get('name', 'N/A')} (asset_id: {outcome.get('asset_id', 'N/A')})")
                else:
                    logger.warning(f"‚ö†Ô∏è  –†—ã–Ω–æ–∫ #{i+1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(market)}")
            
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if markets and len(markets) > 0:
                first_market = markets[0]
                if isinstance(first_market, dict):
                    logger.info("=" * 50)
                    logger.info("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–ï–†–í–û–ì–û –†–´–ù–ö–ê:")
                    logger.info(f"–¢–∏–ø: {type(first_market)}")
                    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: {len(first_market.keys())}")
                    logger.info("–í—Å–µ –∫–ª—é—á–∏:")
                    for key in first_market.keys():
                        value = first_market[key]
                        value_str = str(value)[:100] + "..." if len(str(value)) > 100 else str(value)
                        logger.info(f"  {key} = {value_str}")
                    logger.info("=" * 50)
            
            logger.info(f"üéØ –ò–¢–û–ì–û –ü–û–õ–£–ß–ï–ù–û: {len(markets)} —Ä—ã–Ω–∫–æ–≤ –æ—Ç Polymarket")
            return markets
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤: {e}")
            return []

    def get_current_price(self, token_id: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞"""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.warning("–§—É–Ω–∫—Ü–∏—è get_current_price –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return 0.5

    def get_account_balance(self) -> float:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Polymarket Data API —Å fallback –Ω–∞ RPC
        """
        try:
            logger.info("üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Polymarket Data API")
            
            # –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            addresses_to_check = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º proxy –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if self.config.polymarket.POLYMARKET_PROXY_ADDRESS:
                addresses_to_check.append(self.config.polymarket.POLYMARKET_PROXY_ADDRESS)
            
            # –î–æ–±–∞–≤–ª—è–µ–º main –∞–¥—Ä–µ—Å
            main_address = self.get_address()
            if main_address:
                addresses_to_check.append(main_address)
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(addresses_to_check)} –∞–¥—Ä–µ—Å–æ–≤")
            for i, addr in enumerate(addresses_to_check):
                addr_type = "PROXY" if i == 0 and self.config.polymarket.POLYMARKET_PROXY_ADDRESS else "MAIN"
                logger.info(f"   üìç {addr_type}: {addr}")
            
            for user_address in addresses_to_check:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {['PROXY', 'MAIN'][addresses_to_check.index(user_address)]} –∞–¥—Ä–µ—Å–∞: {user_address}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π
                positions_value = self._get_positions_value(user_address)
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π USDC
                proxy_wallet, free_usdc = self._get_free_usdc_balance(user_address)
                
                # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –ø—Ä–æ–≤–µ—Ä–∫—É USDC –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–∞–º–æ–º –∞–¥—Ä–µ—Å–µ
                direct_usdc = self._check_usdc_balance_for_address(user_address)
                
                logger.info(f"üìä –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π: ${positions_value or 0:.6f}")
                if free_usdc is not None:
                    logger.info(f"üíµ –°–≤–æ–±–æ–¥–Ω—ã–π USDC (proxy): ${free_usdc:.6f}")
                if direct_usdc is not None:
                    logger.info(f"üíµ –ü—Ä—è–º–æ–π USDC (—Å–∞–º –∞–¥—Ä–µ—Å): ${direct_usdc:.6f}")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
                total_balance = 0.0
                
                if positions_value and positions_value > 0:
                    total_balance += positions_value
                
                if free_usdc and free_usdc > 0:
                    total_balance += free_usdc
                elif direct_usdc and direct_usdc > 0:
                    total_balance += direct_usdc
                
                if total_balance > 0:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å ${total_balance:.6f} –Ω–∞ –∞–¥—Ä–µ—Å–µ {user_address}")
                    return total_balance
            
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã
            logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ fallback –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
            return self._get_balance_fallback()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0

    def _get_positions_value(self, user_address: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π USD —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ Polymarket Data API"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
            if len(user_address) != 42 or not user_address.startswith("0x"):
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞: {user_address} (–¥–ª–∏–Ω–∞: {len(user_address)}, –æ–∂–∏–¥–∞–µ—Ç—Å—è 42)")
                return None
            
            # API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–π
            value_url = f"https://data-api.polymarket.com/value?user={user_address}"
            logger.debug(f"üì° –ó–∞–ø—Ä–æ—Å –∫ Data API (value): {value_url}")
            
            response = requests.get(value_url, timeout=10)
            logger.debug(f"üìä Data API (value) —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 400:
                logger.warning(f"‚ö†Ô∏è Data API (value) –≤–µ—Ä–Ω—É–ª 400: –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å {user_address}")
                return None
            elif response.status_code == 200:
                data = response.json()
                logger.debug(f"üìã Data API (value) –æ—Ç–≤–µ—Ç: {data}")
                
                if isinstance(data, list) and len(data) > 0:
                    user_data = data[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    if isinstance(user_data, dict) and 'value' in user_data:
                        total_value = float(user_data['value'])
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π: ${total_value:.6f}")
                        return total_value
                    else:
                        logger.warning("‚ö†Ô∏è Data API (value): –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
                elif isinstance(data, list) and len(data) == 0:
                    logger.info("‚ÑπÔ∏è Data API (value): –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return 0.0
                else:
                    logger.warning(f"‚ö†Ô∏è Data API (value): –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
            else:
                logger.warning(f"‚ö†Ô∏è Data API (value) –æ—à–∏–±–∫–∞ HTTP: {response.status_code}")
                
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ Data API (value): {e}")
            
        return None

    def _get_free_usdc_balance(self, user_address: str) -> Tuple[Optional[str], Optional[float]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ USDC –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ proxy wallet
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (proxy_wallet_address, free_usdc_balance)
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
            if len(user_address) != 42 or not user_address.startswith("0x"):
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞: {user_address} (–¥–ª–∏–Ω–∞: {len(user_address)}, –æ–∂–∏–¥–∞–µ—Ç—Å—è 42)")
                return None, None
            
            # API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            positions_url = f"https://data-api.polymarket.com/positions?user={user_address}"
            logger.debug(f"üì° –ó–∞–ø—Ä–æ—Å –∫ Data API (positions): {positions_url}")
            
            response = requests.get(positions_url, timeout=10)
            logger.debug(f"üìä Data API (positions) —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 400:
                logger.warning(f"‚ö†Ô∏è Data API (positions) –≤–µ—Ä–Ω—É–ª 400: –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å {user_address}")
                return None, None
            elif response.status_code == 200:
                data = response.json()
                logger.debug(f"üìã Data API (positions) –æ—Ç–≤–µ—Ç: {type(data)} —Å {len(data) if isinstance(data, list) else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º'} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                
                proxy_wallet = None
                
                if isinstance(data, list) and len(data) > 0:
                    # –ò—â–µ–º proxy wallet –≤ –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    first_position = data[0]
                    if isinstance(first_position, dict) and 'proxyWallet' in first_position:
                        proxy_wallet = first_position['proxyWallet']
                        logger.info(f"üè¶ –ù–∞–π–¥–µ–Ω proxy wallet: {proxy_wallet}")
                        
                        # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π USDC –±–∞–ª–∞–Ω—Å –¥–ª—è proxy wallet
                        free_usdc = self._check_usdc_balance_for_address(proxy_wallet)
                        return proxy_wallet, free_usdc
                    else:
                        logger.warning("‚ö†Ô∏è Data API (positions): proxyWallet –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
                elif isinstance(data, list) and len(data) == 0:
                    logger.info("‚ÑπÔ∏è Data API (positions): –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return None, 0.0
                else:
                    logger.warning(f"‚ö†Ô∏è Data API (positions): –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
            else:
                logger.warning(f"‚ö†Ô∏è Data API (positions) –æ—à–∏–±–∫–∞ HTTP: {response.status_code}")
                
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ Data API (positions): {e}")
            
        return None, None

    def _check_usdc_balance_for_address(self, user_address: str) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å USDC –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ RPC"""
        try:
            # USDC –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞ Polygon (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞—Ç–∏–≤–Ω–æ–º—É USDC)
            usdc_contracts = [
                ("Native USDC", "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359"),  # –ù–∞—Ç–∏–≤–Ω—ã–π USDC (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                ("Bridged USDC", "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"),  # Bridged USDC
            ]
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ RPC endpoints –¥–ª—è Polygon
            rpc_endpoints = [
                "https://polygon-rpc.com",
                "https://polygon.llamarpc.com", 
                "https://rpc-mainnet.matic.network",
                "https://polygon.blockpi.network/v1/rpc/public",
            ]
            
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ USDC –¥–ª—è –∞–¥—Ä–µ—Å–∞: {user_address}")
            
            for contract_name, contract_addr in usdc_contracts:
                logger.debug(f"üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ {contract_name}: {contract_addr}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ balanceOf
                function_signature = "0x70a08231"  # balanceOf(address)
                padded_address = user_address.replace("0x", "").lower().zfill(64)
                call_data = function_signature + padded_address
                
                for rpc_url in rpc_endpoints:
                    try:
                        payload = {
                            "jsonrpc": "2.0",
                            "method": "eth_call",
                            "params": [{
                                "to": contract_addr,
                                "data": call_data
                            }, "latest"],
                            "id": 1
                        }
                        
                        response = requests.post(
                            rpc_url,
                            json=payload,
                            headers={"Content-Type": "application/json"},
                            timeout=10
                        )
                        
                        if response.status_code != 200:
                            logger.debug(f"‚ö†Ô∏è RPC {rpc_url} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                            continue
                            
                        data = response.json()
                        result = data.get("result", "0x0")
                        
                        if result and result != "0x0" and not result.endswith("0" * 60):
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ hex –≤ decimal (USDC –∏–º–µ–µ—Ç 6 decimals)
                            balance_wei = int(result, 16)
                            balance_usdc = balance_wei / (10 ** 6)  # USDC –∏–º–µ–µ—Ç 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                            
                            if balance_usdc > 0:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π USDC: ${balance_usdc:.6f} ({contract_name})")
                                logger.info(f"   üè¶ –ê–¥—Ä–µ—Å: {user_address}")
                                logger.info(f"   üìÑ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract_addr}")
                                logger.info(f"   üåê RPC: {rpc_url}")
                                return balance_usdc
                                
                    except Exception as e:
                        logger.debug(f"‚ùå –û—à–∏–±–∫–∞ —Å RPC {rpc_url}: {e}")
                        continue
                        
            logger.debug(f"‚ÑπÔ∏è –°–≤–æ–±–æ–¥–Ω—ã–π USDC –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–¥—Ä–µ—Å–∞ {user_address}")
            return 0.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {user_address}: {e}")
            return None

    def _get_balance_fallback(self) -> float:
        """Fallback –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤
            addresses_to_try = []
            
            # Main –∞–¥—Ä–µ—Å
            if self.account:
                addresses_to_try.append(self.account.address)
            
            # Proxy –∞–¥—Ä–µ—Å
            if self.config.polymarket.POLYMARKET_PROXY_ADDRESS:
                addresses_to_try.append(self.config.polymarket.POLYMARKET_PROXY_ADDRESS)
            
            logger.info(f"üîÑ Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π USDC –±–∞–ª–∞–Ω—Å –¥–ª—è {len(addresses_to_try)} –∞–¥—Ä–µ—Å–æ–≤")
            
            for addr in addresses_to_try:
                usdc_balance = self._check_usdc_balance_for_address(addr)
                if usdc_balance and usdc_balance > 0:
                    logger.info(f"‚úÖ Fallback: –Ω–∞–π–¥–µ–Ω USDC ${usdc_balance:.6f} –Ω–∞ {addr}")
                    return usdc_balance
            
            logger.warning("‚ö†Ô∏è Fallback: –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∞–¥—Ä–µ—Å–µ")
            return 0.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ fallback –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0

    async def monitor_balance(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
        if not self.account:
            return
        
        try:
            current_balance = self.get_account_balance()
            if current_balance is None:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if not hasattr(self, '_previous_balance'):
                self._previous_balance = current_balance
                logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞: ${current_balance:.2f}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–±–æ–ª—å—à–µ 5%)
            balance_change = current_balance - self._previous_balance
            change_percent = abs(balance_change) / self._previous_balance * 100 if self._previous_balance > 0 else 0
            
            if change_percent >= 5.0:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 5%
                from src.telegram_bot import telegram_notifier
                
                change_emoji = "üìà" if balance_change > 0 else "üìâ"
                await telegram_notifier.send_message(
                    f"{change_emoji} <b>–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                    f"üí∞ <b>–ë—ã–ª–æ:</b> ${self._previous_balance:.2f}\n"
                    f"üí∞ <b>–°—Ç–∞–ª–æ:</b> ${current_balance:.2f}\n"
                    f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {balance_change:+.2f} ({change_percent:+.1f}%)\n\n"
                    f"‚è∞ <i>{datetime.now().strftime('%H:%M:%S')} UTC</i>"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {balance_change:+.2f} ({change_percent:+.1f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å (–º–µ–Ω—å—à–µ $5)
            if current_balance < 5.0:
                from src.telegram_bot import telegram_notifier
                await telegram_notifier.send_message(
                    f"üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å!</b>\n\n"
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${current_balance:.2f}\n"
                    f"‚ö†Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏\n\n"
                    f"‚è∞ <i>{datetime.now().strftime('%H:%M:%S')} UTC</i>"
                )
                logger.warning(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance:.2f}")
            
            self._previous_balance = current_balance
            logger.debug(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞: ${current_balance:.2f}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")

    async def check_balance(self, frequency_seconds: int):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
        if not self.account:
            return
        
        try:
            current_balance = self.get_account_balance()
            if current_balance is None:
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            if not hasattr(self, '_balance_stats'):
                self._balance_stats = {
                    'initial_balance': current_balance,
                    'max_balance': current_balance,
                    'min_balance': current_balance,
                    'check_count': 0,
                    'last_check': datetime.now()
                }
                logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞: ${current_balance:.2f}")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self._balance_stats
            stats['check_count'] += 1
            stats['max_balance'] = max(stats['max_balance'], current_balance)
            stats['min_balance'] = min(stats['min_balance'], current_balance)
            stats['last_check'] = datetime.now()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–≤–æ–¥–∫–∏
            summary_interval_seconds = self.config.trading.BALANCE_SUMMARY_INTERVAL_MINUTES * 60
            checks_per_summary = max(1, summary_interval_seconds // frequency_seconds)
            
            # –ö–∞–∂–¥—ã–µ N –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ BALANCE_SUMMARY_INTERVAL_MINUTES)
            if stats['check_count'] % checks_per_summary == 0:
                from src.telegram_bot import telegram_notifier
                
                total_change = current_balance - stats['initial_balance']
                total_change_percent = (total_change / stats['initial_balance'] * 100) if stats['initial_balance'] > 0 else 0
                
                await telegram_notifier.send_message(
                    f"üìä <b>–°–≤–æ–¥–∫–∞ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                    f"üí∞ <b>–¢–µ–∫—É—â–∏–π:</b> ${current_balance:.2f}\n"
                    f"üéØ <b>–ù–∞—á–∞–ª—å–Ω—ã–π:</b> ${stats['initial_balance']:.2f}\n"
                    f"üìà <b>–ú–∞–∫—Å–∏–º—É–º:</b> ${stats['max_balance']:.2f}\n"
                    f"üìâ <b>–ú–∏–Ω–∏–º—É–º:</b> ${stats['min_balance']:.2f}\n"
                    f"üìä <b>–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {total_change:+.2f} ({total_change_percent:+.1f}%)\n"
                    f"üîÑ <b>–ü—Ä–æ–≤–µ—Ä–æ–∫:</b> {stats['check_count']}\n\n"
                    f"‚è∞ <i>{datetime.now().strftime('%H:%M:%S')} UTC</i>"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ #{stats['check_count']}, –∏–Ω—Ç–µ—Ä–≤–∞–ª {self.config.trading.BALANCE_SUMMARY_INTERVAL_MINUTES} –º–∏–Ω)")
            
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ #{stats['check_count']}: ${current_balance:.2f}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")

    def _make_request(self, method, url, **kwargs) -> Optional[requests.Response]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å"""
        try:
            response = requests.request(method, url, timeout=10, **kwargs)
            response.raise_for_status()
            return response
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
            return None

    async def check_and_close_positions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π."""
        if not self.account:
            return

        try:
            open_positions = await self.db_manager.get_open_positions()
            user_address = self.get_address()
            user_positions = [p for p in open_positions if p.get('user_address') == user_address]

            if not user_positions:
                logger.debug("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return

            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {len(user_positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

            for position in user_positions:
                current_price = self.get_current_price(position['token_id'])
                if not current_price:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {position['token_id']}")
                    continue
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ –ë–î
                await self.db_manager.update_position_price(position['id'], current_price)
                
                entry_price = position['entry_price']
                pnl_percent = ((current_price - entry_price) / entry_price) * 100
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                should_close, reason = self._should_close_position(position, current_price, pnl_percent)
                
                if should_close:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    await self._close_position(position, reason, pnl_percent)
                    
                    # –£–¥–∞–ª—è–µ–º —Ä—ã–Ω–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è
                    await self._cleanup_market_from_active_positions(position['market_id'])
                else:
                    logger.debug(f"–ü–æ–∑–∏—Ü–∏—è {position['id']}: PnL {pnl_percent:.2f}%, —Ü–µ–Ω–∞ ${current_price:.4f}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")

    def _should_close_position(self, position: Dict, current_price: float, pnl_percent: float) -> Tuple[bool, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–±—ã–ª—å
        target_profit = position.get('target_profit', self.config.trading.PROFIT_TARGET_PERCENT)
        if pnl_percent >= target_profit:
            return True, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å {target_profit:.1f}%"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å
        stop_loss = position.get('stop_loss', self.config.trading.STOP_LOSS_PERCENT)
        if pnl_percent <= stop_loss:
            return True, f"–°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å {stop_loss:.1f}%"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º—è
        created_at = datetime.fromisoformat(position['created_at'].replace('Z', '+00:00'))
        hours_open = (datetime.utcnow().replace(tzinfo=created_at.tzinfo) - created_at).total_seconds() / 3600
        max_hours = self.config.trading.MAX_POSITION_HOURS
        
        if hours_open >= max_hours:
            return True, f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è ({max_hours}—á)"
        
        return False, "–£—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"

    async def _close_position(self, position: Dict, reason: str, pnl_percent: float):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é"""
        position_id = position['id']
        
        try:
            logger.info(f"üî¥ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {position_id}: {reason}")
            logger.info(f"üìä PnL: {pnl_percent:.2f}%")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ API
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            
            pnl_amount = (position['size'] * position['entry_price']) * (pnl_percent / 100)
            
            await self.db_manager.close_position(position_id, reason, pnl_amount)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            from src.telegram_bot import telegram_notifier
            await telegram_notifier.send_profit_notification({
                'order_id': position_id,
                'profit_percent': pnl_percent,
                'pnl_amount': pnl_amount,
                'reason': reason
            })
            
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {position_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {position_id}: {e}")

    async def _cleanup_market_from_active_positions(self, market_id: Optional[str]):
        """–£–¥–∞–ª—è–µ—Ç —Ä—ã–Ω–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not market_id:
            return
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ä—ã–Ω–∫–∞
            open_positions = await self.db_manager.get_open_positions()
            user_address = self.get_address()
            market_positions = [p for p in open_positions 
                              if p.get('user_address') == user_address and p.get('market_id') == market_id]
            
            if not market_positions:
                # –ù–µ—Ç –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ä—ã–Ω–∫–∞ - —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                # –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
                logger.info(f"üßπ –£–¥–∞–ª—è–µ–º —Ä—ã–Ω–æ–∫ {market_id} –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π)")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä—ã–Ω–∫–∞ {market_id}: {e}")
            return False

    def _start_websocket_listener(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket —Å–ª—É—à–∞—Ç–µ–ª—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º."""
        self.ws_thread = threading.Thread(target=self._websocket_loop, daemon=True)
        self.ws_thread.start()

    def _websocket_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º."""
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)
        self.loop.run_until_complete(self._stable_websocket_handler())
        self.loop.close()

    async def _stable_websocket_handler(self):
        """–°—Ç–∞–±–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ fallback."""
        url = self.config.polymarket.WEBSOCKET_HOST + "/ws/market"
        connection_attempts = 0
        max_attempts = self.config.polymarket.WEBSOCKET_MAX_ATTEMPTS
        base_delay = 1
        max_delay = 60
        websocket_enabled = True
        
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {url}")
        
        while self.is_running:
            if not websocket_enabled and not self.config.polymarket.WEBSOCKET_FALLBACK_ENABLED:
                logger.error("WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –∏ fallback –∑–∞–ø—Ä–µ—â–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                await asyncio.sleep(30)
                websocket_enabled = True
                continue
                
            if not websocket_enabled:
                # Fallback –Ω–∞ HTTP polling –µ—Å–ª–∏ WebSocket –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                logger.warning("WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTP polling –∫–∞–∫ fallback")
                await self._http_polling_fallback()
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥, –º–æ–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebSocket
                websocket_enabled = True  # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                continue
                
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏—Ö asset_ids
                markets = self.get_markets()
                if not markets or len(markets) == 0:
                    logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è WebSocket –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTP polling")
                    await self._http_polling_fallback()
                    await asyncio.sleep(60)
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º asset_ids –∏–∑ –ø–µ—Ä–≤—ã—Ö 10 —Ä—ã–Ω–∫–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å)
                asset_ids = []
                logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ asset_ids –∏–∑ {min(len(markets), 10)} —Ä—ã–Ω–∫–æ–≤...")
                
                for i, market in enumerate(markets[:10]):
                    market_question = market.get('question', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫')[:50]
                    logger.debug(f"üìä –†—ã–Ω–æ–∫ #{i+1}: {market_question}")
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º outcomes (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                    outcomes = market.get('outcomes', [])
                    if outcomes:
                        logger.debug(f"   üìã –ù–∞–π–¥–µ–Ω—ã outcomes: {len(outcomes)}")
                        for j, outcome in enumerate(outcomes):
                            asset_id = outcome.get('asset_id')
                            if asset_id:
                                asset_ids.append(asset_id)
                                logger.debug(f"   ‚úÖ Asset ID #{j+1}: {asset_id[:20]}...")
                    
                    # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º tokens (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
                    tokens = market.get('tokens', [])
                    if tokens:
                        logger.debug(f"   üéØ –ù–∞–π–¥–µ–Ω—ã tokens: {len(tokens)}")
                        for j, token in enumerate(tokens):
                            if isinstance(token, dict):
                                # –ò—â–µ–º token_id –∫–∞–∫ asset_id
                                token_id = token.get('token_id')
                                if token_id:
                                    asset_ids.append(token_id)
                                    logger.debug(f"   ‚úÖ Token ID #{j+1}: {token_id[:20]}...")
                            elif isinstance(token, str):
                                # –ï—Å–ª–∏ token - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
                                asset_ids.append(token)
                                logger.debug(f"   ‚úÖ Token #{j+1}: {token[:20]}...")
                
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                asset_ids = list(set(asset_ids))
                logger.info(f"üéØ –°–æ–±—Ä–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö asset_ids: {len(asset_ids)}")
                
                if not asset_ids:
                    logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã asset_ids –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTP polling")
                    await self._http_polling_fallback()
                    await asyncio.sleep(60)
                    continue
                
                logger.info(f"üöÄ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {len(asset_ids)} asset_ids —á–µ—Ä–µ–∑ WebSocket")
                
                # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å async for –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                async for websocket in websockets.connect(
                    url,
                    ping_interval=self.config.polymarket.WEBSOCKET_PING_INTERVAL,
                    ping_timeout=self.config.polymarket.WEBSOCKET_PING_TIMEOUT,
                    close_timeout=10,  # –¢–∞–π–º–∞—É—Ç –∑–∞–∫—Ä—ã—Ç–∏—è 10 —Å–µ–∫—É–Ω–¥
                    max_size=2**20,    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è 1MB
                    compression=None   # –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                ):
                    try:
                        self.websocket = websocket
                        self.is_connected = True
                        connection_attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                        
                        logger.info("WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–∏...")
                        
                        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Polymarket
                        subscription_message = {
                            "assets_ids": asset_ids,
                            "type": "market"
                        }
                        await websocket.send(json.dumps(subscription_message))
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {len(asset_ids)} assets")
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                        if connection_attempts > 0:
                            from src.telegram_bot import telegram_notifier
                            await telegram_notifier.send_message(
                                "üîå <b>WebSocket –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {len(asset_ids)} —Ä—ã–Ω–∫–æ–≤\n"
                                "‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏: <1 —Å–µ–∫—É–Ω–¥—ã\n\n"
                                "‚è∞ <i>{}</i>".format(datetime.now().strftime('%H:%M:%S'))
                            )
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö PING —Å–æ–æ–±—â–µ–Ω–∏–π
                        ping_task = asyncio.create_task(self._websocket_ping_task(websocket))
                        
                        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                        async for message in websocket:
                            try:
                                data = json.loads(message)
                                logger.debug(f"üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: {type(data)} - {str(data)[:200]}")
                                
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                                if isinstance(data, dict):
                                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å–ª–æ–≤–∞—Ä—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
                                    if data.get('event_type') in ['book', 'price_change', 'last_trade_price']:
                                        await self.message_handler(data)
                                elif isinstance(data, list):
                                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
                                    for item in data:
                                        if isinstance(item, dict) and item.get('event_type') in ['book', 'price_change', 'last_trade_price']:
                                            await self.message_handler(item)
                                else:
                                    logger.debug(f"ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {type(data)}")
                                    
                            except json.JSONDecodeError:
                                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}")
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                                logger.debug(f"üîç –ü—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message[:500]}")
                        
                        # –û—Ç–º–µ–Ω—è–µ–º ping –∑–∞–¥–∞—á—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ü–∏–∫–ª–∞
                        ping_task.cancel()
                        
                    except websockets.exceptions.ConnectionClosed as e:
                        self.is_connected = False
                        logger.warning(f"WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
                        # async for –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                        continue
                        
                    except Exception as e:
                        self.is_connected = False
                        logger.error(f"–û—à–∏–±–∫–∞ –≤ WebSocket —Ü–∏–∫–ª–µ: {e}")
                        break
                        
            except Exception as e:
                self.is_connected = False
                connection_attempts += 1
                
                if connection_attempts >= max_attempts:
                    logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket ({max_attempts})")
                    
                    if self.config.polymarket.WEBSOCKET_FALLBACK_ENABLED:
                        websocket_enabled = False
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ HTTP polling
                        from src.telegram_bot import telegram_notifier
                        await telegram_notifier.send_message(
                            "‚ö†Ô∏è <b>WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                            "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ HTTP polling\n"
                            "üìä –ó–∞–¥–µ—Ä–∂–∫–∞: –¥–æ 60 —Å–µ–∫—É–Ω–¥\n"
                            "üîß –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫\n\n"
                            "‚è∞ <i>{}</i>".format(datetime.now().strftime('%H:%M:%S'))
                        )
                        continue
                    else:
                        logger.error("Fallback –æ—Ç–∫–ª—é—á–µ–Ω, WebSocket –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
                        connection_attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                
                # Exponential backoff —Å jitter
                delay = min(base_delay * (2 ** min(connection_attempts, 6)) + random.uniform(0, 1), max_delay)
                logger.warning(f"WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–ø–æ–ø—ã—Ç–∫–∞ {connection_attempts}/{max_attempts}), "
                             f"–ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫: {e}")
                await asyncio.sleep(delay)

    async def _http_polling_fallback(self):
        """HTTP polling –∫–∞–∫ fallback –∫–æ–≥–¥–∞ WebSocket –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ HTTP API
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤
            logger.debug("HTTP polling: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤...")
            
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ API
            # markets = self.get_markets()
            # for market in markets:
            #     await self.message_handler({"type": "market", "data": market})
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP polling fallback: {e}")

    async def _websocket_ping_task(self, websocket):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö PING —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            while self.is_running and not websocket.closed:
                await asyncio.sleep(10)  # PING –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                if not websocket.closed:
                    await websocket.send("PING")
                    logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω WebSocket PING")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤ PING –∑–∞–¥–∞—á–µ: {e}")

    def stop_websocket(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        self.is_running = False
        
        if self.websocket and self.loop and self.loop.is_running():
            asyncio.run_coroutine_threadsafe(self.websocket.close(), self.loop)
            
        if self.ws_thread and self.ws_thread.is_alive():
            self.ws_thread.join(timeout=5)


class PolymarketClientException(Exception):
    pass
