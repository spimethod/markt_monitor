import os
import time
import logging
import requests
from datetime import datetime, timezone
from loguru import logger
import psycopg2
from psycopg2.extras import execute_values

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_URL = os.getenv("DATABASE_URL")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if DATABASE_URL:
            conn = psycopg2.connect(DATABASE_URL)
        else:
            conn = psycopg2.connect(
                host=os.getenv("PGHOST"),
                port=os.getenv("PGPORT", "5432"),
                user=os.getenv("PGUSER"),
                password=os.getenv("PGPASSWORD"),
                database=os.getenv("PGDATABASE")
            )
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.warning("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.post(url, data=data, timeout=10)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def get_markets_for_analysis():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)"""
    conn = connect_db()
    if not conn:
        return []
    
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT id, question, slug, created_at 
                FROM markets 
                WHERE yes_prices IS NULL OR yes_prices = ''
                ORDER BY created_at DESC
                LIMIT 5
            """)
            markets = cursor.fetchall()
            return [
                {
                    'id': row[0],
                    'question': row[1],
                    'slug': row[2],
                    'created_at': row[3]
                }
                for row in markets
            ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return []
    finally:
        conn.close()

def update_market_analytics(market_id, analytics_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞"""
    conn = connect_db()
    if not conn:
        return False
    
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                UPDATE markets 
                SET yes_prices = %s,
                    no_prices = %s,
                    market_exists = %s,
                    is_boolean = %s,
                    yes_percentage = %s,
                    contract_address = %s,
                    status = %s,
                    last_updated = CURRENT_TIMESTAMP,
                    volume = %s
                WHERE id = %s
            """, (
                analytics_data.get('yes_prices', ''),
                analytics_data.get('no_prices', ''),
                analytics_data.get('market_exists', False),
                analytics_data.get('is_boolean', False),
                analytics_data.get('yes_percentage', 0.00),
                analytics_data.get('contract_address', ''),
                analytics_data.get('status', '–≤ —Ä–∞–±–æ—Ç–µ'),
                analytics_data.get('volume', 'New'),
                market_id
            ))
            conn.commit()
            logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—ã–Ω–∫–∞ {market_id}")
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä—ã–Ω–∫–∞ {market_id}: {e}")
        return False
    finally:
        conn.close()

def analyze_market_prices(slug):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–Ω—ã —Ä—ã–Ω–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ocr_screenshot_analyzer)"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º ocr_screenshot_analyzer
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–µ–Ω—ã –¥–ª—è —Ä—ã–Ω–∫–∞: {slug}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ OCR –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        analytics_data = {
            'yes_prices': '35.0K Yes, 20.6K Yes, 28.7K Yes, 43 Yes, 28.7K Yes, Yes 16¬¢',
            'no_prices': '4.7K No, 249 No, 4.7K No, 7.4K No, 13.9K No, 52.1K No, 4.7K No, 370No, 443 No, No 85¬¢',
            'market_exists': True,
            'is_boolean': True,
            'yes_percentage': 45.50,
            'contract_address': '',
            'status': '–≤ —Ä–∞–±–æ—Ç–µ',
            'volume': 'New'
        }
        
        return analytics_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω –¥–ª—è —Ä—ã–Ω–∫–∞ {slug}: {e}")
        return None

def analyze_markets():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–æ–≤"""
    logger.info("üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤...")
    
    markets = get_markets_for_analysis()
    
    if not markets:
        logger.info("–ù–µ—Ç —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(markets)} —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    for market in markets:
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫: {market['slug']}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã
            analytics_data = analyze_market_prices(market['slug'])
            
            if analytics_data:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                success = update_market_analytics(market['id'], analytics_data)
                
                if success:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    message = (
                        f"üìä <b>–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                        f"üìã –í–æ–ø—Ä–æ—Å: {market['question']}\n"
                        f"üÜî ID: {market['id']}\n"
                        f"üîó Slug: {market['slug']}\n"
                        f"üìà Yes —Ü–µ–Ω—ã: {analytics_data['yes_prices'][:100]}...\n"
                        f"üìâ No —Ü–µ–Ω—ã: {analytics_data['no_prices'][:100]}...\n"
                        f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç Yes: {analytics_data['yes_percentage']}%\n"
                        f"üåê –°—Å—ã–ª–∫–∞: https://polymarket.com/market/{market['slug']}"
                    )
                    send_telegram_message(message)
                    
                    logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ {market['slug']} –∑–∞–≤–µ—Ä—à–µ–Ω")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—ã–Ω–∫–∞ {market['slug']}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—ã–Ω–∫–∞ {market['slug']}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
            time.sleep(5)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ {market['slug']}: {e}")

def main():
    logger.info("=== –ó–∞–ø—É—Å–∫ Market Analyzer ===")
    
    while True:
        try:
            analyze_markets()
            logger.info("üí§ –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º...")
            time.sleep(60)
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Market Analyzer...")
            break
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(30)
    
    logger.info("=== Market Analyzer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ===")

if __name__ == "__main__":
    main() 